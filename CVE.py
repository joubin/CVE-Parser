import os
from typing import List

from cpe import CPE
from pycvesearch import CVESearch
import json
from enum import Enum
from multiprocessing.pool import ThreadPool


class Severity(Enum):
    LOW = 0
    MEDIUM = 1
    HIGH = 2

    @staticmethod
    def num2enum(num: float):
        def getscore(score):
            return float(score)

        if getscore(num) <= 3.9:
            return Severity.LOW
        elif getscore(num) <= 6.9:
            return Severity.MEDIUM
        else:
            return Severity.HIGH


NSMAP = {
    None: 'http://scap.nist.gov/schema/feed/vulnerability/2.0',
    'vuln': 'http://scap.nist.gov/schema/vulnerability/0.4',
}


def prefixed(ns_prefix, rest):
    return '{%s}%s' % (NSMAP[ns_prefix], rest)


template = """================CVE-ID================\n
Vendor: Vendor_name\n
CVE-Summary
============================================\n"""


class CVE(object):
    def __init__(self, cve_entry, thread : ThreadPool = None):
        self.id = cve_entry.find(prefixed('vuln', 'cve-id')).text
        self.vulnsoftware = cve_entry.find(prefixed('vuln', 'vulnerable-software-list'))
        self.part = []
        self.vendor = []
        self.version = []
        self.update = []
        self.edition = []
        self.language = []
        self.product = []
        self.year_path = os.path.join("CVE_Detail", self.get_year())
        self.cvssscore = None
        self.accessVector = None
        self.accessComplexity = None
        self.auth = None
        self.impactConf = None
        self.impactInt = None
        self.impactAvail = None

        if self.vulnsoftware is not None:
            for product in self.vulnsoftware:
                try:
                    mycpe = CPE(product.text)
                except NotImplementedError as e:
                    print(e)
                else:
                    self.part.append(mycpe.get_part()[0])
                    self.vendor.append(mycpe.get_vendor()[0])

                    self.version.append(mycpe.get_version()[0])
                    self.update.append(mycpe.get_update()[0])
                    self.edition.append(mycpe.get_edition()[0])
                    self.language.append(mycpe.get_language()[0])
                    self.product.append(mycpe.get_product()[0])

        cvss = cve_entry.find(prefixed('vuln', 'cvss'))
        if cvss is not None:
            self.cvssscore = cvss.getchildren()[0].getchildren()[0].text
            self.accessVector = cvss.getchildren()[0].getchildren()[1].text
            self.accessComplexity = cvss.getchildren()[0].getchildren()[2].text
            self.auth = cvss.getchildren()[0].getchildren()[3].text
            self.impactConf = cvss.getchildren()[0].getchildren()[4].text
            self.impactInt = cvss.getchildren()[0].getchildren()[5].text
            self.impactAvail = cvss.getchildren()[0].getchildren()[6].text

        self.summery = cve_entry.find(prefixed('vuln', 'summary')).text
        if thread != None:
            thread.apply_async(self.get_from_pycvesearch)

    def get_from_pycvesearch(self, cache:bool = True, read_cache:bool = True) -> any:
        if os.path.exists(self.get_file_name()) and read_cache:
            with open(self.get_file_name(), "r") as cvefile:
                try:
                    content = json.load(cvefile)
                except Exception:
                    content = self.get_from_pycvesearch(cache=cache, read_cache=False)
        else:
            print("-", end="")
            tmp = None
            failed_cound = 0
            while tmp == None:
                try:
                    tmp = CVESearch().id(self.id)
                except Exception:
                    print("Trouble fetching ", self.id, failed_cound)
                    import time
                    failed_cound += 1
                    time.sleep(failed_cound)
            content = tmp
            if cache:
                self.cache_cve(content)
        return content

    def get_cvss_from_pyvsearch(self) -> float:
        try:
            return float(self.get_from_pycvesearch()['cvss'])
        except:
            return 0.0

    def get_cvss(self) -> float:
        try:
            return float(self.cvssscore)
        except Exception:
            return self.get_cvss_from_pyvsearch()

    def get_summary_from_pycvesearch(self) -> str:
        return self.get_from_pycvesearch()['summary']

    def get_capec_summary_from_pycvesearch(self) -> []:
        try:
            arrays = self.get_from_pycvesearch()['capec']
            return [item['summary'][0] for item in arrays]
        except KeyError:
            return []

    def get_capec_summary_str_from_pycvesearch(self) -> str:
        return '\n - '.join(self.get_capec_summary_from_pycvesearch())

    def get_complete_summary(self) -> str:
        return ' - ' + '\n - '.join([self.get_capec_summary_str_from_pycvesearch(), self.summery])

    def does_summary_match(self) -> bool:
        return self.summery == self.get_summary_from_pycvesearch()

    def mystr(self) -> str:
        return template.replace("CVE-ID", self.id).replace("CVE-Summary", self.get_complete_summary()).replace(
            "Vendor_name", ', '.join(self.get_company()))

    def tostr(self) -> str:
        return self.id + '\n' + self.vulnsoftware + '\n' + self.part + '\n' + \
               self.vendor + '\n' + self.version + '\n' + self.update + '\n' + \
               self.edition + '\n' + self.language + '\n' + self.product + '\n' + \
               self.year_path + '\n' + self.cvssscore + '\n' + self.accessVector + '\n' + \
               self.accessComplexity + '\n' + self.auth + '\n' + self.impactConf + '\n' + \
               self.impactInt + '\n' + self.impactAvail + '\n'

    def get_year(self):
        return self.id.split("-")[1]

    def get_base_path(self):
        return os.path.join("CVE_Detail", self.get_year())

    def get_file_name(self):
        return os.path.join(self.get_base_path(), self.id + ".txt")

    def cache_cve(self, content: any):
        os.makedirs(self.get_base_path(), exist_ok=True)
        with open(self.get_file_name(), "w") as cvefile:
            json.dump(content, cvefile)

    def get_company(self) -> List[str]:
        return list(set(self.vendor))

    def get_severity(self) -> Severity:
        try:
            return Severity.num2enum(self.get_cvss())
        except AttributeError:
            return Severity.LOW

    @staticmethod
    def get_CVE():
        CVESearch.search()


if __name__ == '__main__':
    print(Severity.num2enum(100))
