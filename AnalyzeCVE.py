# coding: utf-8
# noinspection PyUnresolvedReferences

import operator
import os
from typing import List
from PlotlyStyle import get_bar_layout, get_pie_graph
from threading import Thread

import plotly.graph_objs as go
import plotly.plotly as py
from lxml import etree
from plotly.offline import init_notebook_mode, plot, iplot

import CVE
import Paths
from CVEScoreStat import Stats
from Keywords import Keywords

try:
    init_notebook_mode()
except ImportError:
    pass
NSMAP = {
    None: 'http://scap.nist.gov/schema/feed/vulnerability/2.0',
    'vuln': 'http://scap.nist.gov/schema/vulnerability/0.4',
}


def prefixed(ns_prefix, rest):
    return '{%s}%s' % (NSMAP[ns_prefix], rest)


# These vendors were chosen because they had the most cves reported in 2015
# intrest = ['apple', 'cisco', 'oracle', 'adobe']
# vendorList = []


def download_cve_from_nvd(filename: str) -> None:
    from urllib import request
    import gzip
    try:
        baselink = "https://nvd.nist.gov/feeds/xml/cve/replaceme.gz"
        url = filename.replace(Paths.data, "")
        url = baselink.replace("replaceme", url)
        with request.urlopen(url) as html:
            htmldata = html.read()
            with gzip.open(filename + ".gz", "wb+") as gzwriter:
                gzwriter.write(htmldata)
            with gzip.open(filename + ".gz", "rb") as gzreader:
                with open(filename, "wb+") as xml:
                    xml.write(gzip.decompress(gzreader.read()))

    except Exception as e:
        print(e)
        return False


def getinfo(filename, force=False):
    from multiprocessing.pool import ThreadPool

    data_file_bin = filename + ".bin"

    def _getinfo(file_name: str, pool:ThreadPool = None):
        if not os.path.exists(file_name):
            download_cve_from_nvd(file_name)

        f = open(file_name)
        tree = etree.parse(f)
        f.close()
        vulns = []
        entry_nodes = tree.getroot()
        print(file_name, " CVE Count:", len(entry_nodes))
        for entry in entry_nodes:
            thisvuln = CVE.CVE(entry, thread=pool)
            vulns.append(thisvuln)

        return vulns

    def checkbin():
        pool = ThreadPool(100)
        if not force and os.path.exists(data_file_bin):
            cve_data = load_data(data_file_bin)
        else:
            cve_data = _getinfo(filename, pool=pool)
            save_data(cve_data, data_file_bin)
        pool.join()
        return cve_data

    return checkbin()


def make_pie(cve_data: List[CVE.CVE]) -> None:
    vendoraverage = {}
    skipping = 0
    for cve in cve_data:
        try:
            vendor = cve.vendor
            score = cve.cvssscore
            if vendor in vendoraverage:
                vendoraverage[vendor].addscore(score)
            else:
                vendoraverage[vendor] = Stats(vendor)
                vendoraverage[vendor].addscore(score)
        except KeyError:
            # Expected to have KeyErrors
            skipping += 1

    for vendor in vendoraverage:
        if vendor in [item[0] for item in get_top(cve_data)]:
            tmp_vendor = vendoraverage[vendor]
            if tmp_vendor is not None:
                pie = tmp_vendor.getpiegraphchunks()
                fig = {
                    'data': [{'labels': pie[0],
                              'marker': {'colors': ['#87FC70',
                                                    '#FFDB4C',
                                                    '#FF5E3A']},
                              'values': pie[1],
                              'textposition': 'outside',
                              'textinfo': 'label+percent',
                              'type': 'pie'}],
                    'layout': {'title': 'Data for: ' + vendor.title() + ' 2015 CVE', 'width': 500, 'height': 500}
                }
                # iplot(fig)
                # plot(fig)


def get_top(cve_data: [CVE], number: int = 10) -> List[tuple]:
    vendors = {}
    for item in cve_data:
        for sub in item.get_company():
            vendors[sub] = 0
    for i in cve_data:
        for item in i.get_company():
            try:
                vendors[item] += 1
            except KeyError:
                print("Wow got key error should never happen")
                vendors[item] = 1

    sorted_x = sorted(vendors.items(), key=operator.itemgetter(1), reverse=True)

    return sorted_x[0:number]


def get_top_five_scores(input_data):
    vendoraverage = {}
    for cve in input_data:
        try:
            vendor = cve['vendor']
            score = cve['score']
            if vendor in vendoraverage:
                vendoraverage[vendor].addscore(score)
            else:
                vendoraverage[vendor] = Stats(vendor)
                vendoraverage[vendor].addscore(score)
        except KeyError:
            pass

    topfive = get_top(input_data)

    vendorscores = {}
    for i in topfive:
        vendorscores[i[0]] = vendoraverage[i[0]].getaverage()

    # print(vendorscores)
    vendorscores = sorted(vendorscores.items(), key=operator.itemgetter(1), reverse=True)
    # print(vendorscores)
    for k in vendorscores:
        # print("-", k)
        pass


# noinspection PyUnresolvedReferences
def trend_over_years():
    filename = "data/nvdcve-2.0-"
    fileext = "xml"
    vendorsyear = {}

    for year in range(2002, 2017):
        cvefile = filename + str(year) + "." + fileext
        input_data = getinfo(cvefile)
        for cve in input_data:
            print("Working on a new CVE")
            try:
                vendor = cve['vendor']
                score = cve['score']
                if vendor not in vendorsyear.keys():
                    vendorsyear[vendor] = {}
                if year not in vendorsyear[vendor]:
                    vendorsyear[vendor][year] = Stats(vendor)
                vendorsyear[vendor][year].addscore(score)
            except KeyError:
                #                 print cve, "does not have a vendor associated with it"
                print("KeyError")
                pass

    datatograph = []
    ydataset = {}
    xdataset = range(2002, 2016)
    for k, v in vendorsyear.items():
        # print(k, ":")
        ydataset[k] = []
        for m, n in v.items():
            #             print m,n.getaverage()
            ydataset[k].append(n.getaverage())

    # print(ydataset)

    for company in ydataset:
        trace = go.Scatter(x=xdataset, y=ydataset[company], mode='line', name=company)
        datatograph.append(trace)

    iplot(datatograph)


def graph_by_attack_type(input_data: [CVE], company: str = ""):
    chart_title = "Vulnerability Distribution, Categorized by Weakness type"

    attack_types = dict()
    attack_types["XSS"] = Keywords("xss",
                                   ["cross site scripting", "xss", "cross-site-scripting", "cross-site scripting",
                                    "cross site-scripting",
                                    "xsite scripting"])
    attack_types['Injection'] = Keywords("injection", ["sql injection", "injection", "sqli"])
    attack_types['CSRF'] = Keywords("csrf",
                                    ["cross site request forgery", "csrf", "cross-site-request-forgery",
                                     "cross-site request forgery"])
    attack_types['Memory'] = Keywords("memory",
                                      ["Heap Corruption", "bfo", "buffer overflow", "buffer over-read",
                                       "memory consumption",
                                       "Memory Corruption Vulnerability", "Memory Corruption", "initialize memory",
                                       "Stack Overflow"])
    # attack_types['Serialization'] = Keywords("serialization",
    #                                          ["deserialization attack", "deserialization", "serialization"])
    attack_types['Parsing'] = Keywords("parse",
                                       ["parse", "misparse", "IMG elements", "DLL loading",
                                        "mishandles negative offsets during decoding",
                                        "Microsoft Windows Reader Vulnerability", "via crafted icon data", "XXE",
                                        "deserialization attack", "deserialization", "serialization"])
    # attack_types['Unspecified Vectors'] = Keywords("unspecified",
    #                                                ["unspecified vectors",
    #                                                 "Microsoft Active Directory Federation Services Denial of Service Vulnerability",
    #                                                 "vectors related to Enterprise Infrastructure SEC",
    #                                                 "Unspecified vulnerability",
    #                                                 "unspecified protection mechanism", "unspecified impact"])
    attack_types['Privilege Escalation'] = Keywords("privilage", ["Elevation of Privilege Vulnerability"])
    attack_types["Crypto Failing"] = Keywords("cyrpto", ["does not properly sign"])
    attack_types['Authentication Failure'] = Keywords("password",
                                                      ["blank-password", "blank password", "bypass authentication"])

    not_included = Keywords("all", Keywords.keywords_to_list(attack_types.values()))

    unaccountedfiles = os.path.join(tmp, "uncounted_CVE.txt")

    if os.path.exists(unaccountedfiles):
        os.remove(unaccountedfiles)

    count = 0
    with open(unaccountedfiles, "a+") as unaccountedfiles_writer:
        for cve in input_data:
            if not not_included.contains_keyword(cve, True):
                count += 1
                unaccountedfiles_writer.write(cve.mystr())

            for v in attack_types.values():
                v.increment_if_contain(cve, True)

    print("Uncounted items", count)

    keys = list(attack_types.keys())
    values = list()
    for key in keys:
        value = attack_types[key].count
        if value < 1.0:
            value = None
            del key
        values.append(value)
    fig = go.Figure(data=[{'labels': keys,
                           'values': values,
                           'type': 'pie',
                           'hole': .4,
                           'text': company,
                           'textinfo': 'label+percent'}], layout=get_pie_graph(text=company))
    # fig = {
    #     'data': [{'labels': keys,
    #               'values': values,
    #               'type': 'pie',
    #               'hole': .4,
    #               'text': company,
    #               'textinfo': 'label+percent'}],
    #     'layout': get_pie_graph(text=company)
    # }

    try:
        save_chart_as_image(fig, chart_title + '-' + company + ".png")
    except Exception as e:
        print(e)
    print(fig)
    return fig


# noinspection PyUnresolvedReferences
def graph_by_vendor(input_data: [CVE]):
    vendor_count = dict()
    for cve in input_data:
        for vendor in list(set(cve.vendor)):
            vendor_count[vendor] = [int(0), int(0), int(0)]

    for cve in input_data:
        severity = CVE.Severity.num2enum(cve.get_cvss_from_pyvsearch()).value
        for vendor in list(set(cve.vendor)):
            vendor_count[vendor][severity] += 1

    top_five = get_top(input_data)
    keys = [vendor[0] for vendor in top_five]
    low = []
    medium = []
    high = []
    for key in keys:
        low.append(vendor_count[key][0])
        medium.append(vendor_count[key][1])
        high.append(vendor_count[key][2])

    print(top_five)
    print("low: ", low)
    print("medium ", medium)
    print("high: ", high)

    low = go.Bar(x=keys, y=low, name="low", marker=dict(color='rgb(26,214,253)'))
    medium = go.Bar(x=keys, y=medium, name="medium", marker=dict(color='rgb(255,219,76)'))
    high = go.Bar(x=keys, y=high, name="high", marker=dict(color='rgb(255,94,58)'))

    input_data = [low, medium, high]
    layout = go.Layout(
        barmode='stack',
        title="Top 10 Vendors with the Most CVE in 2016",
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        font=dict(
            color="#000"
        ),
        xaxis=dict(
            tickcolor="#000"
        ),
        yaxis=dict(
            tickcolor="#000"
        ),
        legend=dict(
            # orientation="h",
            font=dict(
                color="#000"
            )
        ))
    fig = go.Figure(data=input_data, layout=layout)

    save_chart_as_image(fig, "Vendor.png")

    # print(vendor_count.keys())


def get_company(name: str, input_data: [CVE]) -> [CVE]:
    result = []
    for cve in input_data:
        if name in cve.vendor:
            result.append(cve)
    return result


def make_dirs():
    import shutil
    import Paths
    try:
        shutil.rmtree(Paths.tmp)
    except FileNotFoundError:
        pass
    finally:
        Paths.os.makedirs(Paths.tmp)
        Paths.os.makedirs(Paths.cvepath)
        Paths.os.makedirs(Paths.imagepath)


def load_data(filename: str):
    import pickle
    try:
        with open(filename, "rb") as f:
            x = pickle.load(f)
    except Exception as e:
        print(e)
        print("Couldnt read")
        x = []
    return x


def save_data(input_data: any, filename: str) -> None:
    import pickle
    try:
        with open(filename, "wb") as f:
            pickle.dump(input_data, f)
    except:
        pass


# noinspection PyUnresolvedReferences
def vulns_per_year(start: int = 2013, end: int = 2018):
    filename = "data/nvdcve-2.0-"
    fileext = "xml"
    year_vuln = {}

    def _yearly(year:int)->None:
        cvefile = filename + str(year) + "." + fileext
        input_data = getinfo(cvefile)
        year_vuln[year] = [0, 0, 0]
        for cve in input_data:
            sev = cve.get_severity().value
            year_vuln[year][sev] += 1

    _threads = []
    for year in range(start, end):
        _threads.append(Thread(target=_yearly, args=(year,), name=year))

    for t in _threads:
        t.start()
        print("started a Thread", t.name)

    for t in _threads:
        print("waiting on", t.name)
        t.join()

    keys = [item for item in range(start, end)]

    low = []
    medium = []
    high = []
    for key in keys:
        low.append(year_vuln[key][0])
        medium.append(year_vuln[key][1])
        high.append(year_vuln[key][2])

    low = go.Bar(x=keys, y=low, name="low", marker=dict(color='rgb(26,214,253)'))
    medium = go.Bar(x=keys, y=medium, name="medium", marker=dict(color='rgb(255,219,76)'))
    high = go.Bar(x=keys, y=high, name="high", marker=dict(color='rgb(255,94,58)'))

    input_data = [low, medium, high]
    layout = get_bar_layout(title="CVE Trend - New CVE's Per Year with Severity Distribution")

    fig = go.Figure(data=input_data, layout=layout)

    save_chart_as_image(fig, "Trend.png")


def top_five_per_year(start: int = 2013, end: int = 2018):
    start_year = start
    end_year = end
    filename = "data/nvdcve-2.0-"
    fileext = "xml"
    union = []
    vuln_per_year = {}
    years = [i for i in range(start_year, end_year)]
    for year in years:

        cve_file = filename + str(year) + "." + fileext
        cve_data = getinfo(cve_file)
        top5 = get_top(cve_data)
        union5 = [item[0] for item in top5]
        union = [list(filter(lambda x: x in union5, sublist)) for sublist in union]

        for i in top5:
            try:
                vuln_per_year[i[0]][year] = i[1]
            except KeyError:
                vuln_per_year[i[0]] = dict()
                vuln_per_year[i[0]][year] = i[1]

                # print(vuln_per_year)


def save_chart_as_image(fig, filename, offline: bool = False) -> None:
    filename = os.path.join(Paths.imagepath, filename)
    if offline:
        plot(fig, filename=filename + '.html', image_filename=filename, show_link=False, auto_open=False, image="png")
    else:
        py.image.save_as(fig, filename=filename)


if __name__ == '__main__':
    from Paths import tmp

    # vulns_per_year()
    # print("Done with Trend")
    if not os.path.exists(Paths.data):
        os.mkdir(Paths.data)
    if not os.path.exists(Paths.tmp):
        os.mkdir(Paths.tmp)
    data_file = "data/nvdcve-2.0-2017.xml"
    make_dirs()
    vulns_per_year()
    data = getinfo(data_file)
    print("Done Loading: ", data_file)
    graph_by_vendor(data)
    print("Done with Vendor")
    graph_by_attack_type(data, "2017")
    print("Done with 2017 Vectors")
    graph_apple_2017 = graph_by_attack_type(get_company('apple', data), "Apple 2017")
    print("Done with apple")
    graph_google_2017 = graph_by_attack_type(get_company('google', data), "Google 2017")
    print("Done with google")
    graph_cisco_2017 = graph_by_attack_type(get_company('cisco', data), "Cisco 2017")
    print("Done with cisco")
    graph_adobe_2017 = graph_by_attack_type(get_company('adobe', data), "Adobe 2017")
    print("Done with adobe")

    data_file = "data/nvdcve-2.0-2016.xml"
    data = getinfo(data_file)
    print("Done Loading: ", data_file)
    graph_by_attack_type(data, "2016")
    print("Done with 2016 Vectors")
    graph_apple_2016 = graph_by_attack_type(get_company('apple', data),
                                            "Apple 2016")
    print("Done with apple")
    graph_google_2016 = graph_by_attack_type(get_company('google', data),
                                             "Google 2016")
    print("Done with google")
    graph_cisco_2016 = graph_by_attack_type(get_company('cisco', data),
                                            "Cisco 2016")
    print("Done with cisco")
    graph_adobe_2016 = graph_by_attack_type(get_company('adobe', data),
                                            "Adobe 2016")
    print("Done with adobe")

    data_file = "data/nvdcve-2.0-2015.xml"
    data = getinfo(data_file)
    print("Done Loading: ", data_file)
    graph_by_attack_type(data, "2015")
    print("Done with 2016 Vectors")
    graph_apple_2015 = graph_by_attack_type(get_company('apple', data), "Apple 2015")
    print("Done with apple")
    graph_google_2015 = graph_by_attack_type(get_company('google', data), "Google 2015")
    print("Done with google")
    graph_cisco_2015 = graph_by_attack_type(get_company('cisco', data), "Cisco 2015")
    print("Done with cisco")
    graph_adobe_2015 = graph_by_attack_type(get_company('adobe', data), "Adobe 2015")
    print("Done with adobe")

    data_file = "data/nvdcve-2.0-2014.xml"
    data = getinfo(data_file)
    print("Done Loading: ", data_file)
    graph_by_attack_type(data, "2014")
    print("Done with 2016 Vectors")
    graph_apple_2014 = graph_by_attack_type(get_company('apple', data), "Apple 2014")
    print("Done with apple")
    graph_google_2014 = graph_by_attack_type(get_company('google', data), "Google 2014")
    print("Done with google")
    graph_cisco_2014 = graph_by_attack_type(get_company('cisco', data), "Cisco 2014")
    print("Done with cisco")
    graph_adobe_2014 = graph_by_attack_type(get_company('adobe', data), "Adobe 2014")
    print("Done with adobe")

    data_file = "data/nvdcve-2.0-2013.xml"
    data = getinfo(data_file, force=True)
    print("Done Loading: ", data_file)
    graph_by_attack_type(data, "2013")
    print("Done with 2016 Vectors")
    graph_apple_2013 = graph_by_attack_type(get_company('apple', data), "Apple 2013")
    print("Done with apple")
    graph_google_2013 = graph_by_attack_type(get_company('google', data), "Google 2013")
    print("Done with google")
    graph_cisco_2013 = graph_by_attack_type(get_company('cisco', data), "Cisco 2013")
    print("Done with cisco")
    graph_adobe_2013 = graph_by_attack_type(get_company('adobe', data), "Adobe 2013")
    print("Done with adobe")
