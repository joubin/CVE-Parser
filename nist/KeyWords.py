from CVE import CVE

cve_dir = "CVE"

class Keywords:
    def __init__(self,simple_name: str, keywords: list = None):
        if keywords is None:
            keywords = []
        self.keywords = keywords
        self.count = 0
        self.simple_name = simple_name

    def add_keyword(self, word: str):
        self.keywords.append(word)

    def remove_keyword(self, word: str):
        self.keywords.remove(word)

    def increment_count(self):
        self.count += 1

    # def contains_keyword(self, word_to_compare: str) -> bool:
    #     for item in self.keywords:
    #         if item.lower() in word_to_compare.lower():
    #             with open(self.simple_name+".txt") as keyword_log:
    #                 keyword_log.write(word_to_compare)
    #             return True
        return False
        #
        # if any(items.lower() in word_to_compare.lower() for items in self.keywords):
        #     return True
        # return False

    def increment_if_contain(self, cve: CVE, log: bool = False):
        if self.contains_keyword(cve, log):
            self.increment_count()
            return True
        else:
            return False

    @staticmethod
    def keywords_to_list(keywords: iter) -> list:
        return list(sum([item.keywords for item in keywords], []))

    def contains_keyword(self, cve: CVE, log: bool = False) -> bool:
        if any(items.lower() in cve.get_complete_summary().lower() for items in self.keywords):
            if log:
                import os
                if not os.path.exists(cve_dir):
                    os.makedirs(cve_dir)
                path = os.path.join(cve_dir, self.simple_name+".txt")
                with open(path, "a+") as log:
                    log.write(cve.mystr())
            return True
        return False



