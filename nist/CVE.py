import os
from cpe import CPE
from pycvesearch import CVESearch
import json

NSMAP = {
    None: 'http://scap.nist.gov/schema/feed/vulnerability/2.0',
    'vuln': 'http://scap.nist.gov/schema/vulnerability/0.4',
}


def prefixed(ns_prefix, rest):
    return '{%s}%s' % (NSMAP[ns_prefix], rest)


template = """================CVE-ID================
CVE-Summary
============================================\n"""


class CVE(object):
    def __init__(self, cve_entry):
        self.id = cve_entry.find(prefixed('vuln', 'cve-id')).text
        self.vulnsoftware = cve_entry.find(prefixed('vuln', 'vulnerable-software-list'))
        self.part = []
        self.vendor = []
        self.version = []
        self.update = []
        self.edition = []
        self.language = []
        self.product = []
        self.year_path = os.path.join("CVE_Detail", self.get_year())

        if self.vulnsoftware is not None:
            for product in self.vulnsoftware:
                try:
                    mycpe = CPE(product.text)
                except NotImplementedError as e:
                    print(e)
                else:
                    self.part.append(mycpe.get_part()[0])
                    self.vendor.append(mycpe.get_vendor()[0])

                    self.version.append(mycpe.get_version()[0])
                    self.update.append(mycpe.get_update()[0])
                    self.edition.append(mycpe.get_edition()[0])
                    self.language.append(mycpe.get_language()[0])
                    self.product.append(mycpe.get_product()[0])

        cvss = cve_entry.find(prefixed('vuln', 'cvss'))
        # print(cvss)
        if cvss is not None:
            self.cvssscore = cvss.getchildren()[0].getchildren()[0].text
            self.accessVector = cvss.getchildren()[0].getchildren()[1].text
            self.accessComplexity = cvss.getchildren()[0].getchildren()[2].text
            self.auth = cvss.getchildren()[0].getchildren()[3].text
            self.impactConf = cvss.getchildren()[0].getchildren()[4].text
            self.impactInt = cvss.getchildren()[0].getchildren()[5].text
            self.impactAvail = cvss.getchildren()[0].getchildren()[6].text

        self.summery = cve_entry.find(prefixed('vuln', 'summary')).text

    def get_from_pycvesearch(self, cache=True) -> any:
        if os.path.exists(self.get_file_name()):
            with open(self.get_file_name(), "r") as cvefile:
                content = json.load(cvefile)
        else:
            content = CVESearch().id(self.id)
            if cache:
                self.cache_cve(content)
        return content

    def get_summary_from_pycvesearch(self) -> str:
        return self.get_from_pycvesearch()['summary']

    def get_capec_summary_from_pycvesearch(self) -> []:
        try:
            arrays = self.get_from_pycvesearch()['capec']
            return [item['summary'][0] for item in arrays]
        except KeyError:
            return []

    def get_capec_summary_str_from_pycvesearch(self) -> str:
        return '\n - '.join(self.get_capec_summary_from_pycvesearch())

    def get_complete_summary(self) -> str:
        return ' - '+'\n - '.join([self.get_capec_summary_str_from_pycvesearch(), self.summery])

    def does_summary_match(self) -> bool:
        return self.summery == self.get_summary_from_pycvesearch()

    def mystr(self) -> str:
        return template.replace("CVE-ID", self.id).replace("CVE-Summary", self.get_complete_summary())

    def get_year(self):
        return self.id.split("-")[1]

    def get_base_path(self):
        return os.path.join("CVE_Detail", self.get_year())

    def get_file_name(self):
        return os.path.join(self.get_base_path(), self.id + ".txt")

    def cache_cve(self, content: any):
        os.makedirs(self.get_base_path(), exist_ok=True)
        with open(self.get_file_name(), "a+") as cvefile:
            json.dump(content, cvefile)


if __name__ == '__main__':
    from lxml import etree

    filename = "test.xml"
    f = open(filename)
    tree = etree.parse(f)
    f.close()
    vulns = []
    entry_nodes = tree.getroot()
    print(len(entry_nodes))
    for entry in entry_nodes:
        thisvuln = CVE(entry)
        print(thisvuln)
