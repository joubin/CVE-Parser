class Stats(object):
    """docstring for Stats"""
    def __init__(self, companyName):
        super(Stats, self).__init__()
        self.__companyName = companyName
        self.scoreSum = 0
        self.count = 0
        self.divs = {}

    def getaverage(self):
        return self.scoreSum/self.count

    def getaveragecount(self, number):
        if self.count > number:
            return self.scoreSum/self.count
        else:
            return 0

    def getcompany(self):
        return self.__companyName

    def getcount(self):
        return self.count

    def addscore(self, numUnchecked):
        num = numUnchecked
        floatNum = float(numUnchecked)
        num = int(floatNum)
        self.scoreSum += floatNum
        self.count += 1
        try:
            self.divs[num] += 1
        except KeyError as e:
            self.divs[num] = 1
        except Exception as e:
            print("Someting else happened")
            self.divs[num] = 1


    def getpiegraph(self):
        
        chunks = sorted(self.divs.keys())
        values = []
        
        for i in chunks:
            values.append(self.divs[i])

        chunks2 = []
        for i in chunks:
            chunks2.append( "Score " + str(i) )

        return (chunks2, values)

    def getpiegraphchunks(self):
        newDivs = {}
        newDivs['Low'] = 0
        newDivs['Medium'] = 0
        newDivs['High'] = 0

        for k, v in self.divs.items():
            if k <= 3:
                newDivs['Low'] += v
            elif k <= 6:
                newDivs['Medium'] += v
            elif k <= 10:
                newDivs['High'] += v

        severity = ['Low', 'Medium', 'High']
        severityScore = [newDivs['Low'], newDivs['Medium'], newDivs['High']]

        return (severity, severityScore)


class CVE(object):
            """docstring for CVE"""
            def __init__(self, prefabDictionary):
                super(CVE, self).__init__()
                self.id = prefabDictionary['id']
                self.date = prefabDictionary['pubdate']
                self.vendor = prefabDictionary['vendor']
                self.product = prefabDictionary['product']
                self.version = prefabDictionary['version']
                self.update = prefabDictionary['update']
                self.edition = prefabDictionary['edition']
                self.language = prefabDictionary['language']
                self.score = None
                self.accessVector = None
                self.accessComplexity = None
                self.auth = None
                self.impactConf = None
                self.impactInt = None
                self.impactAvail = None
                try:
                    self.score = prefabDictionary['score']
                    self.accessVector = prefabDictionary['accessVector']
                    self.accessComplexity = prefabDictionary['accessComplexity']
                    self.auth = prefabDictionary['auth']
                    self.impactConf = prefabDictionary['impactConf']
                    self.impactInt = prefabDictionary['impactInt']
                    self.impactAvail = prefabDictionary['impactAvail']
                except Exception as e:
                    raise e
                
                
            def getid(self):
                return self.id

            def getdate(self):
                return self.date

            def getvendor(self):
                return self.vendor

            def getscore(self):
                return self.score


                
                
                
                
                
                        
if __name__ == '__main__':
    x = {}
    x['a'] =  Stats('a')
    x['a'].addscore(10)
    print(x['a'].getaverage())
    test =  x['a'].getpiegraphchunks()
    print(test[0])
    print(test[1])
