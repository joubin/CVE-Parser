# coding: utf-8

import operator
import os

import plotly.graph_objs as go
from lxml import etree
from plotly.offline import init_notebook_mode, iplot

import plotly.plotly as py
from CVE import CVE
from Keywords import Keywords
from CVEScoreStat import Stats

init_notebook_mode()
# tree = ET.iterparse(open('test.xml'))

NSMAP = {
    None: 'http://scap.nist.gov/schema/feed/vulnerability/2.0',
    'vuln': 'http://scap.nist.gov/schema/vulnerability/0.4',
}


def prefixed(ns_prefix, rest):
    return '{%s}%s' % (NSMAP[ns_prefix], rest)


# These vendors were chosen because they had the most cves reported in 2015
intrest = ['apple', 'cisco', 'oracle', 'adobe']
vendorList = []


def getscore(cvss):
    return float(cvss[0].text)


def getinfo(filename):
    if os.path.exists(filename + '.bin'):
        print(filename, "exists -- taking in")
        with open(filename + '.bin', 'rb') as reader:
            return eval(reader.read())
    print(filename, "binary does not exist, parsing")
    f = open(filename)
    tree = etree.parse(f)
    f.close()
    vulns = []
    entry_nodes = tree.getroot()
    print("CVE Count:", len(entry_nodes))
    for entry in entry_nodes:
        thisvuln = CVE(entry)
        vulns.append(thisvuln)

    return vulns


def make_pie(data: list) -> None:
    vendoraverage = {}
    skipping = 0
    for cve in data:
        try:
            vendor = cve.vendor
            score = cve.cvssscore
            if vendor in vendoraverage:
                vendoraverage[vendor].addscore(score)
            else:
                vendoraverage[vendor] = Stats(vendor)
                vendoraverage[vendor].addscore(score)
        except KeyError:
            # Expected to have KeyErrors
            skipping += 1

    for vendor in vendoraverage:
        if vendor in intrest:
            tmp = vendoraverage[vendor]
            if tmp is not None:
                pie = tmp.getpiegraphchunks()
                fig = {
                    'data': [{'labels': pie[0],
                              'marker': {'colors': ['#87FC70',
                                                    '#FFDB4C',
                                                    '#FF5E3A']},
                              'values': pie[1],
                              'textposition': 'outside',
                              'textinfo': 'value+percent',
                              'type': 'pie'}],
                    'layout': {'title': 'Data for: ' + vendor.title() + ' 2015 CVE', 'width': 500, 'height': 500}
                }
                iplot(fig)


def get_top_five(data):
    vendors = {}
    for i in data:
        try:
            vendors[i['vendor']] += 1
        except KeyError:
            vendors[i['vendor']] = 1

    sorted_x = sorted(vendors.items(), key=operator.itemgetter(1), reverse=True)

    return sorted_x[0:5]


def get_top_five_scores(data):
    vendoraverage = {}
    for cve in data:
        try:
            vendor = cve['vendor']
            score = cve['score']
            if vendor in vendoraverage:
                vendoraverage[vendor].addscore(score)
            else:
                vendoraverage[vendor] = Stats(vendor)
                vendoraverage[vendor].addscore(score)
        except KeyError:
            pass

    topfive = get_top_five(data)

    vendorscores = {}
    for i in topfive:
        vendorscores[i[0]] = vendoraverage[i[0]].getaverage()

    print(vendorscores)
    vendorscores = sorted(vendorscores.items(), key=operator.itemgetter(1), reverse=True)
    print(vendorscores)
    for k in vendorscores:
        print("-", k)


def trend_over_years():
    filename = "data/nvdcve-2.0-"
    fileext = "xml"
    vendorsyear = {}

    for year in range(2002, 2016):
        cvefile = filename + str(year) + "." + fileext
        data = getinfo(cvefile)
        for cve in data:
            print("Working on a new CVE")
            try:
                vendor = cve['vendor']
                score = cve['score']
                if vendor not in intrest:
                    continue
                if vendor not in vendorsyear.keys():
                    vendorsyear[vendor] = {}
                if year not in vendorsyear[vendor]:
                    vendorsyear[vendor][year] = Stats(vendor)
                vendorsyear[vendor][year].addscore(score)
            except KeyError:
                #                 print cve, "does not have a vendor associated with it"
                print("KeyError")
                pass

    datatograph = []
    ydataset = {}
    xdataset = range(2002, 2016)
    for k, v in vendorsyear.items():
        print(k, ":")
        ydataset[k] = []
        for m, n in v.items():
            #             print m,n.getaverage()
            ydataset[k].append(n.getaverage())

    print(ydataset)

    for company in ydataset:
        trace = go.Scatter(x=xdataset, y=ydataset[company], mode='line', name=company)
        datatograph.append(trace)

    iplot(datatograph)


def graph_by_attack_type(data: [CVE], chart_title: str, chart_file_name: str = "a-simple-plot.png"):
    attack_types = dict()
    attack_types["XSS"] = Keywords("xss",
                                   ["cross site scripting", "xss", "cross-site-scripting", "cross-site scripting",
                                    "cross site-scripting",
                                    "xsite scripting"])
    attack_types['Injection'] = Keywords("injection", ["sql injection", "injection", "sqli"])
    attack_types['CSRF'] = Keywords("csrf",
                                    ["cross site request forgery", "csrf", "cross-site-request-forgery",
                                     "cross-site request forgery"])
    attack_types['Memory'] = Keywords("memory",
                                      ["Heap Corruption", "bfo", "buffer overflow", "buffer over-read",
                                       "memory consumption",
                                       "Memory Corruption Vulnerability", "Memory Corruption", "initialize memory",
                                       "Stack Overflow"])
    attack_types['Serialization'] = Keywords("serialization",
                                             ["deserialization attack", "deserialization", "serialization"])
    attack_types['Parsing'] = Keywords("parse",
                                       ["parse", "misparse", "IMG elements", "DLL loading",
                                        "mishandles negative offsets during decoding",
                                        "Microsoft Windows Reader Vulnerability", "via crafted icon data", "XXE"])
    attack_types['Unspecified Vectors'] = Keywords("unspecified",
                                                   ["unspecified vectors",
                                                    "Microsoft Active Directory Federation Services Denial of Service Vulnerability",
                                                    "vectors related to Enterprise Infrastructure SEC",
                                                    "Unspecified vulnerability",
                                                    "unspecified protection mechanism", "unspecified impact"])
    attack_types['Privilege Escalation'] = Keywords("privilage", ["Elevation of Privilege Vulnerability"])
    attack_types["Crypto Failing"] = Keywords("cyrpto", ["does not properly sign"])
    attack_types["Password"] = Keywords("password", ["blank-password", "blank password", "bypass authentication"])

    not_included = Keywords("all", Keywords.keywords_to_list(attack_types.values()))

    unaccountedfiles = "something.txt"

    if os.path.exists(unaccountedfiles):
        os.remove(unaccountedfiles)

    count = 0
    with open(unaccountedfiles, "a+") as unaccountedfiles_writer:
        for cve in data:
            if not not_included.contains_keyword(cve, True):
                count += 1
                unaccountedfiles_writer.write(cve.mystr())

            for v in attack_types.values():
                v.increment_if_contain(cve, True)

    print("Uncounted items", count)

    keys = list(attack_types.keys())
    values = list()
    for key in keys:
        values.append(attack_types[key].count)
    fig = {
        'data': [{'labels': keys,
                  'values': values,
                  'type': 'pie'}],
        'layout': {'title': chart_title}}

    try:
        py.image.save_as(fig, filename=chart_file_name)
    except Exception:
        pass


def graph_by_vendor(input_data: [CVE]):
    import operator
    vendor_count = dict()
    for vulns in input_data:
        for vendor in list(set(vulns.vendor)):
            try:
                vendor_count[vendor] += 1
            except KeyError:
                vendor_count[vendor] = 1

    sorted_x = sorted(vendor_count.items(), key=operator.itemgetter(0))

    keys = []
    values = []
    top = 30
    other = 0
    for val in sorted_x:

        if top <= 0:
            other += val[1]
        else:
            try:
                keys.append(val[0])
                values.append(val[1])
            except TypeError:
                print(0, " for ", val)
                values.append(0)
            top -= 1
    keys.append("Other")
    values.append(other)
    #
    # print(keys)
    # print(values)
    # print(len(keys) == len(values))

    fig = {
        'data': [{'labels': keys,
                  'values': values,
                  'type': 'pie'}],
        'layout': {'title': 'Companies'}}

    py.image.save_as(fig, filename='images/vendors.png')


def get_company(name: str, input_data: [CVE]) -> [CVE]:
    result = []
    for cve in input_data:
        if name in cve.vendor:
            result.append(cve)
    return result


def make_dirs():
    import os
    if os.path.exists("CVE"):
        filelist = [f for f in os.listdir("CVE") if f.endswith(".txt")]
        for f in filelist:
            os.remove("CVE/" + f)
    else:
        os.mkdir("CVE")
    if os.path.exists("images"):
        filelist = [f for f in os.listdir("images") if f.endswith(".png")]
        for f in filelist:
            os.remove("images/" + f)
    else:
        os.mkdir("images")


if __name__ == '__main__':
    make_dirs()
    data = getinfo('data/nvdcve-2.0-2016.xml')
    print("Done Loading")

    graph_by_attack_type(data, "Attack type distribution")
    graph_by_vendor(data)
    graph_by_attack_type(get_company('apple', data), "Attack type distribution -- Apple",
                         "images/Apple_attack_type.png")
    graph_by_attack_type(get_company('google', data), "Attack type distribution -- Google",
                         "images/Google_attack_type.png")
    graph_by_attack_type(get_company('cisco', data), "Attack type distribution -- Cisco",
                         "images/Cisco_attack_type.png")
    graph_by_attack_type(get_company('adobe', data), "Attack type distribution -- Adobe",
                         "images/Adobe_attack_type.png")
