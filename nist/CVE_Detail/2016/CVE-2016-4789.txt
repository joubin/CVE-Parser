{"Modified": "2016-05-26T18:07:32.163-04:00", "vulnerable_configuration": [{"title": "PulseSecure Pulse Connect Secure (PCS) 8.1R1.1", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.1r1.1"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.1R1.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.1r1.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.1", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.1"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.0R8.1", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.0r8.1"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.0R8.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.0r8.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.0R7.1", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.0r7.1"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.0R7.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.0r7.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.0R6.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.0r6.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.0R5.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.0r5.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.0R4.1", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.0r4.1"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.0R4.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.0r4.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.0R3.2", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.0r3.2"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.0R3.1", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.0r3.1"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.0R3.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.0r3.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.0R2.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.0r2.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.0R1.1", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.0r1.1"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.0R1.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.0r1.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R13.3", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r13.3"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R13.2", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r13.2"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R13.1", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r13.1"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R13.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r13.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R12.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r12.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R11.1", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r11.1"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R11.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r11.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R10.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r10.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R9.3", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r9.3"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R9.2", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r9.2"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R9.1", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r9.1"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R9.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r9.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R8.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r8.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R7.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r7.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R6.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r6.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R5.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r5.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R4.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r4.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R3.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r3.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R2.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r2.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4R1.0", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4r1.0"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 7.4", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:7.4"}, {"title": "PulseSecure Pulse Connect Secure (PCS) 8.2", "id": "cpe:2.3:a:pulsesecure:pulse_connect_secure:8.2"}], "vulnerable_configuration_cpe_2_2": ["cpe:/a:pulsesecure:pulse_connect_secure:8.1r1.1", "cpe:/a:pulsesecure:pulse_connect_secure:8.1r1.0", "cpe:/a:pulsesecure:pulse_connect_secure:8.1", "cpe:/a:pulsesecure:pulse_connect_secure:8.0r8.1", "cpe:/a:pulsesecure:pulse_connect_secure:8.0r8.0", "cpe:/a:pulsesecure:pulse_connect_secure:8.0r7.1", "cpe:/a:pulsesecure:pulse_connect_secure:8.0r7.0", "cpe:/a:pulsesecure:pulse_connect_secure:8.0r6.0", "cpe:/a:pulsesecure:pulse_connect_secure:8.0r5.0", "cpe:/a:pulsesecure:pulse_connect_secure:8.0r4.1", "cpe:/a:pulsesecure:pulse_connect_secure:8.0r4.0", "cpe:/a:pulsesecure:pulse_connect_secure:8.0r3.2", "cpe:/a:pulsesecure:pulse_connect_secure:8.0r3.1", "cpe:/a:pulsesecure:pulse_connect_secure:8.0r3.0", "cpe:/a:pulsesecure:pulse_connect_secure:8.0r2.0", "cpe:/a:pulsesecure:pulse_connect_secure:8.0r1.1", "cpe:/a:pulsesecure:pulse_connect_secure:8.0r1.0", "cpe:/a:pulsesecure:pulse_connect_secure:8.0", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r13.3", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r13.2", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r13.1", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r13.0", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r12.0", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r11.1", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r11.0", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r10.0", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r9.3", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r9.2", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r9.1", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r9.0", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r8.0", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r7.0", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r6.0", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r5.0", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r4.0", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r3.0", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r2.0", "cpe:/a:pulsesecure:pulse_connect_secure:7.4r1.0", "cpe:/a:pulsesecure:pulse_connect_secure:7.4", "cpe:/a:pulsesecure:pulse_connect_secure:8.2"], "last-modified": "2016-05-26T18:07:32.163-04:00", "cvss-time": "2016-05-26T13:43:28.583-04:00", "ranking": [[{"circl": 2}]], "cwe": "CWE-79", "access": {"authentication": "NONE", "complexity": "MEDIUM", "vector": "NETWORK"}, "cvss": 4.3, "capec": [{"related_weakness": ["79", "80", "83", "84", "82", "348", "96", "20", "116", "184", "86", "350", "692", "697", "713", "71"], "solutions": ["Design: Use browser technologies that do not allow client side scripting.", "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.", "Implementation: Perform input validation for all remote content.", "Implementation: Perform output validation for all remote content.", "Implementation: Disable scripting languages such as JavaScript in browser", "Implementation: Session tokens for specific host", "Implementation: Service provider should not use the XMLHttpRequest method to create a local proxy for content from other sites, because the client will not be able to discern what content comes from which host."], "id": "18", "prerequisites": ["Target client software must be a client that allows script execution based on scripts generated by remote hosts."], "summary": ["This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an attacker to tunnel through the application's elements and launch a XSS attack through other elements.", "As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote attacker to collect and interpret the output of said attack."], "name": "Embedding Scripts in Non-Script Elements"}, {"related_weakness": ["79", "276", "279", "284", "692", "697", "713", "71"], "solutions": ["Design: Use browser technologies that do not allow client side scripting.", "Design: Utilize strict type, character, and encoding enforcement", "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.", "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.", "Implementation: Perform input validation for all remote content.", "Implementation: Perform output validation for all remote content.", "Implementation: Disable scripting languages such as JavaScript in browser", "Implementation: Session tokens for specific host", "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.", "Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode"], "id": "19", "prerequisites": ["Target software must be able to execute scripts, and also allow attacker to write/upload script"], "summary": ["An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts. The attacker leverages this capability to execute scripts to execute his/her own script by embedding it within other scripts that the target software is likely to execute. The attacker must have the ability to inject script into script that is likely to be executed. If this is done, then the attacker can potentially launch a variety of probes and attacks against the web server's local environment, in many cases the so-called DMZ, back end resources the web server can communicate with, and other hosts.", "With the proliferation of intermediaries, such as Web App Firewalls, network devices, and even printers having JVMs and Web servers, there are many locales where an attacker can inject malicious scripts. Since this attack pattern defines scripts within scripts, there are likely privileges to execute said attack on the host.", "Of course, these attacks are not solely limited to the server side, client side scripts like Ajax and client side JavaScript can contain malicious scripts as well. In general all that is required is for there to be sufficient privileges to execute a script, but not protected against writing."], "name": "Embedding Scripts within Scripts"}, {"related_weakness": ["79", "81"], "solutions": ["Design: Use libraries and templates that minimize unfiltered input.", "Implementation: Normalize, filter and white list any input that will be used in error messages.", "Implementation: The victim should configure the browser to minimize active content from untrusted sources."], "id": "198", "prerequisites": ["A third party web server which fails to adequately sanitize messages sent in error pages.", "The victim must be made to execute a query crafted by the attacker which results in the infected error report."], "summary": ["An attacker distributes a link (or possibly some other query structure) with a request to a third party web server that is malformed and also contains a block of exploit code in order to have the exploit become live code in the resulting error page. When the third party web server receives the crafted request and notes the error it then creates an error message that echoes the malformed message, including the exploit. Doing this converts the exploit portion of the message into to valid language elements that are executed by the viewing browser. When a victim executes the query provided by the attacker the infected error message error message is returned including the exploit code which then runs in the victim's browser. XSS can result in execution of code as well as data leakage (e.g. session cookies can be sent to the attacker). This type of attack is especially dangerous since the exploit appears to come from the third party web server, who the victim may trust and hence be more vulnerable to deception."], "name": "Cross-Site Scripting in Error Pages"}, {"related_weakness": ["79", "87", "85", "20", "86", "692", "697", "713", "71"], "solutions": ["Design: Use browser technologies that do not allow client side scripting.", "Design: Utilize strict type, character, and encoding enforcement", "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.", "Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.", "Implementation: Perform input validation for all remote content, including remote and user-generated content", "Implementation: Perform output validation for all remote content.", "Implementation: Disable scripting languages such as JavaScript in browser", "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."], "id": "199", "prerequisites": ["Target client software must allow scripting such as JavaScript."], "summary": ["The attacker uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the \"script\" tag using the alternate forms of \"Script\" or \"ScRiPt\" may bypass filters where \"script\" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality."], "name": "Cross-Site Scripting Using Alternate Syntax"}, {"related_weakness": ["79", "345", "646"], "solutions": [], "id": "209", "prerequisites": ["The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file.", "The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content."], "summary": ["An attacker creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. Some browsers will detect that the specified MIME type of the file does not match the actual type of the content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the attackers' script may run on the target unsanitized. For example, the MIME type text/plain may be used where the actual content is text/javascript or text/html. Since text does not contain scripting instructions, the stated MIME type would indicate that filtering is unnecessary. However, if the target application subsequently determines the file's real type and invokes the appropriate interpreter, scripted content could be invoked. In another example, img tags in HTML content could reference a renderable type file instead of an expected image file. The file extension and MIME type can describe an image file, but the file content can be text/javascript or text/html resulting in script execution. If the browser assumes all references in img tags are images, and therefore do not need to be filtered for scripts, this would bypass content filters. In a cross-site scripting attack, the attacker tricks the victim into accessing a URL that uploads a script file with an incorrectly specified MIME type. If the victim's browser switches to the appropriate interpreter without filtering, the attack will execute as a standard XSS attack, possibly revealing the victim's cookies or executing arbitrary script in their browser."], "name": "Cross-Site Scripting Using MIME Type Mismatch"}, {"related_weakness": ["79", "83"], "solutions": ["Design: Use libraries and templates that minimize unfiltered input.", "Implementation: Normalize, filter and white list all input including that which is not expected to have any scripting content.", "Implementation: The victim should configure the browser to minimize active content from untrusted sources."], "id": "243", "prerequisites": ["The target application must fail to adequately sanitize HTML attributes against the presence of dangerous commands."], "summary": ["The attacker inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities."], "name": "Cross-Site Scripting in Attributes"}, {"related_weakness": ["79", "84", "85", "20", "86", "692", "697", "713", "71"], "solutions": ["Design: Use browser technologies that do not allow client side scripting.", "Design: Utilize strict type, character, and encoding enforcement.", "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.", "Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.", "Implementation: Perform input validation for all remote content, including remote and user-generated content", "Implementation: Perform output validation for all remote content.", "Implementation: Disable scripting languages such as JavaScript in browser", "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."], "id": "244", "prerequisites": ["Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme."], "summary": ["An attack of this type exploits the ability of most browsers to interpret \"data\", \"javascript\" or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link."], "name": "Cross-Site Scripting via Encoded URI Schemes "}, {"related_weakness": ["79", "85"], "solutions": ["Design: Use libraries and templates that minimize unfiltered input.", "Implementation: Normalize, filter and sanitize all user supplied fields.", "Implementation: The victim should configure the browser to minimize active content from untrusted sources."], "id": "245", "prerequisites": ["The targeted web application does not fully normalize input before checking for prohibited syntax. In particular, it must fail to recognize prohibited methods preceded by certain sequences of repeated characters."], "summary": ["The attacker bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the < before a script command, (<<script or %3C%3script using URI encoding) the filters of some web applications may fail to recognize the presence of a script tag. If the targeted server is vulnerable to this type of bypass, the attacker can create a crafted URL or other trap to cause a victim to view a page on the targeted server where the malicious content is executed, as per a normal XSS attack."], "name": "Cross-Site Scripting Using Doubled Characters, e.g. %3C%3Cscript"}, {"related_weakness": ["79"], "solutions": [], "id": "246", "prerequisites": [], "summary": ["An attacker injects malicious script to global parameters in a Flash movie via a crafted URL. The malicious script is executed in the context of the Flash movie. As such, this is a form of Cross-Site Scripting (XSS), but the abilities granted to the Flash movie make this attack more flexible."], "name": "Cross-Site Scripting Using Flash"}, {"related_weakness": ["79", "86"], "solutions": ["Design: Use libraries and templates that minimize unfiltered input.", "Implementation: Normalize, filter and white list any input that will be included in any subsequent web pages or back end operations.", "Implementation: The victim should configure the browser to minimize active content from untrusted sources."], "id": "247", "prerequisites": ["The target must fail to remove invalid characters from input and fail to adequately scan beyond these characters."], "summary": ["The attacker inserts invalid characters in identifiers to bypass application filtering of input. Filters may not scan beyond invalid characters but during later stages of processing content that follows these invalid characters may still be processed. This allows the attacker to sneak prohibited commands past filters and perform normally prohibited operations. Invalid characters may include null, carriage return, line feed or tab in an identifier. Successful bypassing of the filter can result in a XSS attack, resulting in the disclosure of web cookies or possibly other results."], "name": "Cross-Site Scripting with Masking through Invalid Characters in Identifiers"}, {"related_weakness": ["79", "84", "85", "20", "86", "692", "697", "713", "71"], "solutions": ["Design: Use browser technologies that do not allow client side scripting.", "Design: Utilize strict type, character, and encoding enforcement", "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.", "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.", "Implementation: Perform input validation for all remote content, including remote and user-generated content", "Implementation: Perform output validation for all remote content.", "Implementation: Disable scripting languages such as JavaScript in browser", "Implementation: Session tokens for specific host", "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.", "Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode"], "id": "32", "prerequisites": ["Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation."], "summary": ["A variant of cross-site scripting called \"reflected\" cross-site scripting, the HTTP Query Strings attack consists of passing a malicious script inside an otherwise valid HTTP request query string. This is of significant concern for sites that rely on dynamic, user-generated content such as bulletin boards, news sites, blogs, and web enabled administration GUIs. The malicious script may steal session data, browse history, probe files, or otherwise execute attacks on the client side. Once the attacker has prepared the malicious HTTP query it is sent to a victim user (perhaps by email, IM, or posted on an online forum), who clicks on a normal looking link that contains a poison query string. This technique can be made more effective through the use of services like http://tinyurl.com/, which makes very small URLs that will redirect to very large, complex ones. The victim will not know what he is really clicking on."], "name": "Embedding Scripts in HTTP Query Strings"}, {"related_weakness": ["79", "20", "184", "96", "113", "348", "116", "350", "86", "602", "692", "697", "713", "71"], "solutions": ["Design: Use browser technologies that do not allow client side scripting.", "Design: Utilize strict type, character, and encoding enforcement", "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.", "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.", "Implementation: Perform input validation for all remote content.", "Implementation: Perform output validation for all remote content.", "Implementation: Session tokens for specific host", "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."], "id": "63", "prerequisites": ["Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser"], "summary": ["An attacker embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level.", "An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect."], "name": "Simple Script Injection"}, {"related_weakness": ["79", "113", "348", "96", "20", "116", "184", "86", "712", "692"], "solutions": ["Design: Use browser technologies that do not allow client side scripting.", "Design: Utilize strict type, character, and encoding enforcement", "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.", "Implementation: Perform input validation for all remote content.", "Implementation: Perform output validation for all remote content.", "Implementation: Disable scripting languages such as JavaScript in browser", "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."], "id": "85", "prerequisites": ["The user must allow JavaScript to execute in their browser"], "summary": ["This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application.", "A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on."], "name": "AJAX Fingerprinting"}, {"related_weakness": ["79", "184", "348", "96", "20", "116", "86", "692", "697", "713", "71"], "solutions": ["Design: Use browser technologies that do not allow client side scripting.", "Design: Utilize strict type, character, and encoding enforcement", "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.", "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.", "Implementation: Perform input validation for all remote content.", "Implementation: Perform output validation for all remote content.", "Implementation: Disable scripting languages such as JavaScript in browser", "Implementation: Session tokens for specific host", "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."], "id": "86", "prerequisites": ["Target software must be a client that allows scripting communication from remote hosts, and attacker must control a remote site of some sort to redirect client and data to."], "summary": ["An attack of this type exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications."], "name": "Embedding Script (XSS) in HTTP Headers"}, {"related_weakness": ["82", "79", "74", "20", "692", "697", "713", "71"], "solutions": ["In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.", "All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed."], "id": "91", "prerequisites": ["Application permitting the inclusion or use of IMG tags"], "summary": ["Image tags are an often overlooked, but convenient, means for a Cross Site Scripting attack. The attacker can inject script contents into an image (IMG) tag in order to steal information from a victim's browser and execute malicious scripts."], "name": "XSS in IMG Tags"}, {"related_weakness": ["79", "117", "74", "20"], "solutions": ["Cleanse all user supplied data before placing it in the logs. Reject all bad data. Ensure that the data is in the expected form.", "Use proper HTML output encoding techniques to strip the log data of potentially dangerous scripting characters before displaying it in the administrative console", "If possible, disable script execution in the administrative interface."], "id": "106", "prerequisites": ["The system uses a web based interface", "The system does not cleanse / validate user supplied data before writing it to logs", "Information from logs is displayed in a web based interface", "The web based log interface does not HTML output encode the log data prior to displaying it in the administrator console."], "summary": ["An attacker may leverage a system weakness where logs are susceptible to log injection to insert scripts into the system's logs. If these logs are later viewed by an administrator through a thin administrative interface and the log data is not properly HTML encoded before being written to the page, the attackers' scripts stored in the log will be executed in the administrative interface with potentially serious consequences. This attack pattern is really a combination of two other attack patterns: log injection and stored cross site scripting."], "name": "Cross Site Scripting through Log Files"}], "id": "CVE-2016-4789", "Published": "2016-05-26T10:59:05.447-04:00", "references": ["https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA40209", "http://www.securitytracker.com/id/1035932"], "map_cve_scip": {"sciplink": "http://www.scip.ch/en/?vuldb.87637", "scipid": "87637"}, "summary": "Cross-site scripting (XSS) vulnerability in the system configuration section in the administrative user interface in Pulse Connect Secure (PCS) 8.2 before 8.2r1, 8.1 before 8.1r2, 8.0 before 8.0r9, and 7.4 before 7.4r13.4 allows remote attackers to inject arbitrary web script or HTML via unspecified vectors.", "impact": {"integrity": "PARTIAL", "availability": "NONE", "confidentiality": "NONE"}}