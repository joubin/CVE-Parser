{"Modified": "2016-04-22T14:59:07.160-04:00", "vulnerable_configuration": [{"title": "cpe:2.3:a:symantec:messaging_gateway:10.6.0:7", "id": "cpe:2.3:a:symantec:messaging_gateway:10.6.0:7"}, {"title": "cpe:2.3:a:symantec:messaging_gateway:10.6.0:6", "id": "cpe:2.3:a:symantec:messaging_gateway:10.6.0:6"}, {"title": "cpe:2.3:a:symantec:messaging_gateway:10.6.0:5", "id": "cpe:2.3:a:symantec:messaging_gateway:10.6.0:5"}, {"title": "cpe:2.3:a:symantec:messaging_gateway:10.6.0:4", "id": "cpe:2.3:a:symantec:messaging_gateway:10.6.0:4"}, {"title": "cpe:2.3:a:symantec:messaging_gateway:10.6.0:3", "id": "cpe:2.3:a:symantec:messaging_gateway:10.6.0:3"}, {"title": "cpe:2.3:a:symantec:messaging_gateway:10.6.0:1", "id": "cpe:2.3:a:symantec:messaging_gateway:10.6.0:1"}, {"title": "cpe:2.3:a:symantec:messaging_gateway:10.6.0:2", "id": "cpe:2.3:a:symantec:messaging_gateway:10.6.0:2"}], "vulnerable_configuration_cpe_2_2": ["cpe:/a:symantec:messaging_gateway:10.6.0:7", "cpe:/a:symantec:messaging_gateway:10.6.0:6", "cpe:/a:symantec:messaging_gateway:10.6.0:5", "cpe:/a:symantec:messaging_gateway:10.6.0:4", "cpe:/a:symantec:messaging_gateway:10.6.0:3", "cpe:/a:symantec:messaging_gateway:10.6.0:1", "cpe:/a:symantec:messaging_gateway:10.6.0:2"], "last-modified": "2016-12-02T22:24:49.177-05:00", "map_cve_nessus": {"nessus_script_family": "CGI abuses", "nessus_script_file": "symantec_messaging_gateway_sym16-005.nasl", "nessus_script_id": "90919", "nessus_script_name": "Symantec Messaging Gateway 10.x < 10.6.1 Management Console Multiple Vulnerabilities (SYM16-005)"}, "references": ["http://www.securityfocus.com/bid/86138", "http://www.securitytracker.com/id/1035609", "http://www.symantec.com/security_response/securityupdates/detail.jsp?fid=security_advisory&pvid=security_advisory&year=&suid=20160418_00"], "ranking": [[{"circl": 2}], [{"circl": 3}]], "cwe": "CWE-74", "map_cve_bid": {"bidid": "86138"}, "cvss": "6.5", "capec": [{"related_weakness": ["120", "119", "118", "74", "20", "680", "733", "697"], "solutions": ["Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.", "Pre-design: Use a language or compiler that performs automatic bounds checking.", "Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.", "Operational: Use OS-level preventative functionality. Not a complete solution.", "Design: Use an abstraction library to abstract away risky APIs. Not a complete solution."], "id": "24", "prerequisites": ["Ability to control the length of data passed to an active filter."], "summary": ["In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered)."], "name": "Filter Failure through Buffer Overflow"}, {"related_weakness": ["91", "74", "20", "390", "713", "707"], "solutions": ["Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."], "id": "250", "prerequisites": ["XML queries used to process user input and retrieve information stored in XML documents", "User-controllable input not properly sanitized"], "summary": ["An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information."], "name": "XML Injection"}, {"related_weakness": ["173", "172", "180", "181", "171", "73", "21", "74", "20", "697", "692"], "solutions": ["Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)", "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input."], "id": "267", "prerequisites": ["The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host."], "summary": ["This attack leverages the possibility to encode potentially harmful input and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult."], "name": "Leverage Alternate Encoding"}, {"related_weakness": ["74", "436"], "solutions": ["Design: Employ strict adherence to interpretations of HTTP messages wherever possible.", "Implementation: Encode header information provided by user input so that user-supplied content is not interpreted by intermediaries."], "id": "273", "prerequisites": ["The targeted server must allow the attacker to insert content that will appear in the server's response."], "summary": ["An attacker injects content into a server response that is interpreted differently by intermediaries than it is by the target browser. To do this, it takes advantage of inconsistent or incorrect interpretations of the HTTP protocol by various applications. For example, it might use different block terminating characters (CR or LF alone), adding duplicate header fields that browsers interpret as belonging to separate responses, or other techniques. Consequences of this attack can include response-splitting, cross-site scripting, apparent defacement of targeted sites, cache poisoning, or similar actions."], "name": "HTTP Response Smuggling"}, {"related_weakness": ["74", "388", "20", "728"], "solutions": ["Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.", "Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior."], "id": "28", "prerequisites": [], "summary": ["Fuzzing is a software testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system.", "An attacker can leverage fuzzing to try to identify weaknesses in the system. For instance fuzzing can help an attacker discover certain assumptions made in the system about user input. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions without really knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve his goals."], "name": "Fuzzing"}, {"related_weakness": ["173", "41", "172", "171", "179", "180", "181", "183", "184", "20", "74", "697", "707"], "solutions": ["Perform white list rather than black list input validation.", "Canonicalize all data prior to validation.", "Take an iterative approach to input validation (defense in depth)."], "id": "3", "prerequisites": ["The targeted API must ignore the leading ghost characters that are used to get past the filters for the semantics to be the same."], "summary": ["An attacker intentionally introduces leading characters that enable getting the input past the filters. The API that is being targeted, ignores the leading \"ghost\" characters, and therefore processes the attackers' input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.", "Some APIs will strip certain leading characters from a string of parameters. Perhaps these characters are considered redundant, and for this reason they are removed. Another possibility is the parser logic at the beginning of analysis is specialized in some way that causes some characters to be removed. The attacker can specify multiple types of alternative encodings at the beginning of a string as a set of probes.", "One commonly used possibility involves adding ghost characters--extra characters that don't affect the validity of the request at the API layer. If the attacker has access to the API libraries being targeted, certain attack ideas can be tested directly in advance. Once alternative ghost encodings emerge through testing, the attacker can move from lab-based API testing to testing real-world service implementations."], "name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters"}, {"related_weakness": ["113", "697", "707", "713", "74"], "solutions": ["To avoid HTTP Response Splitting, the application must not rely on user-controllable input to form part of its output response stream. Specifically, response splitting occurs due to injection of CR-LF sequences and additional headers. All data arriving from the user and being used as part of HTTP response headers must be subjected to strict validation that performs simple character-based as well as semantic filtering to strip it of malicious character sequences and headers."], "id": "34", "prerequisites": ["User-controlled input used as part of HTTP header", "Ability of attacker to inject custom strings in HTTP header", "Insufficient input validation in application to check for input sanity before using it as part of response header"], "summary": ["This attack uses a maliciously-crafted HTTP request in order to cause a vulnerable web server to respond with an HTTP response stream that will be interpreted by the client as two separate responses instead of one. This is possible when user-controlled input is used unvalidated as part of the response headers. The target software, the client, will interpret the injected header as being a response to a second request, thereby causing the maliciously-crafted contents be displayed and possibly cached.", "To achieve HTTP Response Splitting on a vulnerable web server, the attacker:"], "name": "HTTP Response Splitting"}, {"related_weakness": ["306", "74"], "solutions": ["Design: Ensure that terminals are only writeable by named owner user and/or administrator", "Design: Enforce principle of least privilege"], "id": "40", "prerequisites": ["User terminals must have a permissive access control such as world writeable that allows normal users to control data on other user's terminals."], "summary": ["This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded."], "name": "Manipulating Writeable Terminal Devices"}, {"related_weakness": ["120", "119", "74", "20"], "solutions": ["Stay up to date with third party vendor patches", "From \"Exploiting Software\", please see reference below.", "Use the sendmail restricted shell program (smrsh)", "Use mail.local"], "id": "42", "prerequisites": ["The target system uses a mail server.", "Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system."], "summary": ["An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back."], "name": "MIME Conversion"}, {"related_weakness": ["171", "179", "181", "184", "183", "77", "78", "74", "20", "697", "707"], "solutions": ["An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.", "Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.", "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system."], "id": "43", "prerequisites": ["User input is used to construct a command to be executed on the target system or as part of the file name.", "Multiple parser passes are performed on the data supplied by the user."], "summary": ["An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a \"layer\" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps.", "The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application:", "In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop."], "name": "Exploiting Multiple Input Interpretation Layers"}, {"related_weakness": ["120", "285", "302", "118", "119", "74", "20", "680", "697"], "solutions": ["Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.", "Because Symlink can be modified by an attacker, make sure that the ones you read are located in protected directories.", "Pay attention to the resource pointed to by your symlink links (See attack pattern named \"Forced Symlink race\"), they can be replaced by malicious resources.", "Always check the size of the input data before copying to a buffer.", "Use a language or compiler that performs automatic bounds checking.", "Use an abstraction library to abstract away risky APIs. Not a complete solution.", "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.", "Use OS-level preventative functionality. Not a complete solution."], "id": "45", "prerequisites": ["The attacker can create symbolic link on the target host.", "The target host does not perform correct boundary checking while consuming data from a resources."], "summary": ["This type of attack leverages the use of symbolic links to cause buffer overflows. An attacker can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking."], "name": "Buffer Overflow via Symbolic Links"}, {"related_weakness": ["120", "118", "119", "74", "20", "680", "733", "697"], "solutions": ["Use a language or compiler that performs automatic bounds checking.", "Use an abstraction library to abstract away risky APIs. Not a complete solution.", "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.", "Use OS-level preventative functionality. Not a complete solution.", "Do not trust input data from user. Validate all user input."], "id": "46", "prerequisites": ["The target program consumes user-controllable data in the form of tags or variables.", "The target program does not perform sufficient boundary checking."], "summary": ["This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The attacker crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow."], "name": "Overflow Variables and Tags"}, {"related_weakness": ["120", "119", "118", "130", "131", "74", "20", "680", "697"], "solutions": ["Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system"], "id": "47", "prerequisites": ["The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.", "The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is)."], "summary": ["In this attack, the target software is given input that the attacker knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow."], "name": "Buffer Overflow via Parameter Expansion"}, {"related_weakness": ["285", "74", "693"], "solutions": ["Design: Enforce principle of least privilege", "Design: Harden registry server and file access permissions", "Implementation: Implement communications to and from the registry using secure protocols"], "id": "51", "prerequisites": ["The attacker must be able to write to resources or redirect access to the service registry."], "summary": ["SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata (to effect a denial of service), and delete information about service provider interfaces.", "WS-Addressing is used to virtualize services, provide return addresses and other routing information, however, unless the WS-Addressing headers are protected they are vulnerable to rewriting. The attacker that can rewrite WS-addressing information gains the ability to route service requesters to any service providers, and the ability to route service provider response to any service.", "Content in a registry is deployed by the service provider. The registry in an SOA or Web Services system can be accessed by the service requester via UDDI or other protocol. The basic flow for the attacker consists of either altering the data at rest in the registry or uploading malicious content by spoofing a service provider. The service requester is then redirected to send its requests and/or responses to services the attacker controls."], "name": "Poison Web Service Registry"}, {"related_weakness": ["158", "172", "173", "171", "74", "20", "697", "707"], "solutions": ["Properly handle the NULL characters supplied as part of user input prior to doing anything with the data."], "id": "52", "prerequisites": ["The program does not properly handle postfix NULL terminators"], "summary": ["An attacker embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s)."], "name": "Embedding NULL Bytes"}, {"related_weakness": ["158", "172", "173", "171", "74", "20", "697", "707"], "solutions": ["Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.", "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system."], "id": "53", "prerequisites": ["Null terminators are not properly handled by the filter."], "summary": ["If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an attacker to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used."], "name": "Postfix, Null Terminate, and Backslash"}, {"related_weakness": ["177", "171", "173", "172", "73", "21", "22", "74", "20", "697", "707"], "solutions": ["Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.", "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.", "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.", "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.", "Refer to the RFCs to safely decode URL.", "Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.", "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)."], "id": "64", "prerequisites": ["The application accepts and decodes URL string request.", "The application performs insufficient filtering/canonicalization on the URLs."], "summary": ["This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL. An URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc."], "name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic"}, {"related_weakness": ["89", "74", "20", "390", "697", "713", "707"], "solutions": ["Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.", "Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.", "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."], "id": "66", "prerequisites": ["SQL queries used by the application to store, retrieve or modify data.", "User-controllable input that is not properly validated by the application as part of SQL queries."], "summary": ["This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended.", "SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:"], "name": "SQL Injection"}, {"related_weakness": ["120", "134", "74", "20", "680", "697"], "solutions": ["The following code shows a vulnerable usage of Syslog():"], "id": "67", "prerequisites": ["The format string argument of the Syslog function can be tainted with user supplied data."], "summary": ["This attack targets the format string vulnerabilities in the syslog() function. An attacker would typically inject malicious input in the format string parameter of the syslog function. This is a common problem, and many public vulnerabilities and associated exploits have been posted."], "name": "String Format Overflow in syslog()"}, {"related_weakness": ["89", "209", "74", "20", "390", "697", "713", "707"], "solutions": ["Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.", "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear."], "id": "7", "prerequisites": ["SQL queries used by the application to store, retrieve or modify data.", "User-controllable input that is not properly validated by the application as part of SQL queries."], "summary": ["Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the attacker constructs input strings that probe the target through simple Boolean SQL expressions. The attacker can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the attacker determines how and where the target is vulnerable to SQL Injection.", "For example, an attacker may try entering something like \"username' AND 1=1; --\" in an input field. If the result is the same as when the attacker entered \"username\" in the field, then the attacker knows that the application is vulnerable to SQL Injection. The attacker can then ask yes/no questions from the database server to extract information from it. For example, the attacker can extract table names from a database using the following types of queries:", "If the above query executes properly, then the attacker knows that the first character in a table name in the database is a letter between m and z. If it doesn't, then the attacker knows that the character must be between a and l (assuming of course that table names only contain alphabetic characters). By performing a binary search on all character positions, the attacker can determine all table names in the database. Subsequently, the attacker may execute an actual attack and send something like:"], "name": "Blind SQL Injection"}, {"related_weakness": ["176", "171", "179", "180", "173", "172", "184", "183", "74", "20", "697", "692"], "solutions": ["Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.", "Ensure that filtering or input validation is applied to canonical data.", "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system."], "id": "71", "prerequisites": ["Filtering is performed on data that has not be properly canonicalized."], "summary": ["An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly."], "name": "Using Unicode Encoding to Bypass Validation Logic"}, {"related_weakness": ["173", "177", "171", "172", "73", "21", "74", "20"], "solutions": ["Refer to the RFCs to safely decode URL.", "Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.", "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).", "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.", "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.", "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)", "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible."], "id": "72", "prerequisites": ["The application should accepts and decodes URL input.", "The application performs insufficient filtering/canonicalization on the URLs."], "summary": ["This attack targets the encoding of the URL. An attacker can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL. An URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc. The attacker could also subvert the meaning of the URL string request by encoding the data being sent to the server through a GET request. For instance an attacker may subvert the meaning of parameters used in a SQL request and sent through the URL string (See Example section)."], "name": "URL Encoding"}, {"related_weakness": ["23", "22", "73", "77", "346", "348", "285", "264", "272", "59", "74", "15", "715"], "solutions": ["Design: Enforce principle of least privilege.", "Design: Ensure all input is validated, and does not contain file system commands", "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.", "Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.", "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."], "id": "76", "prerequisites": ["Program must allow for user controlled variables to be applied directly to the filesystem"], "summary": ["An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible."], "name": "Manipulating Input to File System Calls"}, {"related_weakness": ["180", "181", "173", "171", "172", "73", "21", "22", "74", "20", "697", "707"], "solutions": ["Verify that the user-supplied data does not use backslash character to escape malicious characters.", "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.", "Be aware of the threat of alternative method of data encoding.", "Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.", "In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.", "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.", "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names."], "id": "78", "prerequisites": ["The application accepts the backlash character as escape character.", "The application server does incomplete input data decoding, filtering and validation."], "summary": ["This attack targets the use of the backslash in alternate encoding. An attacker can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the attacker tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack."], "name": "Using Escaped Slashes in Alternate Encoding"}, {"related_weakness": ["173", "171", "180", "181", "20", "74", "73", "21", "22", "185", "200", "697", "707"], "solutions": ["Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.", "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.", "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)", "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)", "Test your path decoding process against malicious input.", "In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.", "Assume all input is malicious. Create a white list that defines all valid input to the application based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system."], "id": "79", "prerequisites": ["The application server accepts paths to locate resources.", "The application server does insufficient input data validation on the resource path requested by the user.", "The access right to resources are not set properly."], "summary": ["This attack targets the encoding of the Slash characters. An attacker would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the attacker many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other."], "name": "Using Slashes in Alternate Encoding"}, {"related_weakness": ["120", "119", "118", "74", "20", "680", "733", "697"], "solutions": ["Use a language or compiler that performs automatic bounds checking.", "Use secure functions not vulnerable to buffer overflow.", "If you have to use dangerous functions, make sure that you do boundary checking.", "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.", "Use OS-level preventative functionality. Not a complete solution."], "id": "8", "prerequisites": ["The target host exposes an API to the user.", "One or more API functions exposed by the target host has a buffer overflow vulnerability."], "summary": ["This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An attacker who has access to an API may try to embed malicious code in the API function call and exploit a buffer overflow vulnerability in the function's implementation. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process."], "name": "Buffer Overflow in an API Call"}, {"related_weakness": ["173", "172", "180", "181", "171", "73", "21", "74", "20", "697", "692"], "solutions": ["The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.", "Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.", "For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).", "Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)", "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input."], "id": "80", "prerequisites": ["The application's UTF-8 decoder accepts and interprets illegal UTF-8 characters or non-shortest format of UTF-8 encoding.", "Input filtering and validating is not done properly leaving the door open to harmful characters for the target host."], "summary": ["This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the \"shortest possible\" encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters."], "name": "Using UTF-8 Encoding to Bypass Validation Logic"}, {"related_weakness": ["91", "74", "20", "390", "713", "707"], "solutions": ["Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.", "Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.", "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."], "id": "83", "prerequisites": ["XPath queries used to retrieve information stored in XML documents", "User-controllable input not properly sanitized before being used as part of XPath queries"], "summary": ["An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that he normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database. In order to successfully inject XML and retrieve information from a database, an attacker:"], "name": "XPath Injection"}, {"related_weakness": ["74", "713", "707"], "solutions": ["Design: Perform input white list validation on all XML input", "Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL."], "id": "84", "prerequisites": ["The XQL must execute unvalidated data"], "summary": ["This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources."], "name": "XQuery Injection"}, {"related_weakness": ["120", "118", "119", "74", "20", "680", "733", "697"], "solutions": ["Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.", "Use a language or compiler that performs automatic bounds checking.", "Use an abstraction library to abstract away risky APIs. Not a complete solution.", "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.", "Operational: Use OS-level preventative functionality. Not a complete solution.", "Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.", "Do not unnecessarily expose services."], "id": "9", "prerequisites": ["The target host exposes a command-line utility to the user.", "The command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited."], "summary": ["This attack targets command-line utilities available in a number of shells. An attacker can leverage a vulnerability found in a command-line utility to escalate privilege to root."], "name": "Buffer Overflow in Local Command-Line Utilities"}, {"related_weakness": ["82", "79", "74", "20", "692", "697", "713", "71"], "solutions": ["In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.", "All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed."], "id": "91", "prerequisites": ["Application permitting the inclusion or use of IMG tags"], "summary": ["Image tags are an often overlooked, but convenient, means for a Cross Site Scripting attack. The attacker can inject script contents into an image (IMG) tag in order to steal information from a victim's browser and execute malicious scripts."], "name": "XSS in IMG Tags"}, {"related_weakness": ["120", "302", "118", "119", "74", "99", "20", "680", "733", "697"], "solutions": ["Do not expose environment variable to the user.", "Do not use untrusted data in your environment variables.", "Use a language or compiler that performs automatic bounds checking", "There are tools such as Sharefuzz [R.10.3] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow."], "id": "10", "prerequisites": ["The application uses environment variables.", "An environment variable exposed to the user is vulnerable to a buffer overflow.", "The vulnerable environment variable uses untrusted data.", "Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer."], "summary": ["This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the attacker finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables."], "name": "Buffer Overflow via Environment Variables"}, {"related_weakness": ["353", "285", "302", "74", "15", "73", "20", "200"], "solutions": ["Protect environment variables against unauthorized read and write access.", "Protect the configuration files which contain environment variables against illegitimate read and write access.", "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.", "Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege."], "id": "13", "prerequisites": ["An environment variable is accessible to the user.", "An environment variable used by the application can be tainted with user supplied data.", "Input data used in an environment variable is not validated properly.", "The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an attacker may attempt to manipulate that variable."], "summary": ["The attacker directly or indirectly modifies environment variables used by or controlling the target software. The attacker's goal is to cause the target software to deviate from its expected operation in a manner that benefits the attacker."], "name": "Subverting Environment Variable Values"}, {"related_weakness": ["134", "20", "74", "133"], "solutions": ["Limit the usage of formatting string functions.", "Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters."], "id": "135", "prerequisites": ["The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters."], "summary": ["An attacker includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An attacker can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the attacker can write to the program stack."], "name": "Format String Injection"}, {"related_weakness": ["120", "353", "118", "119", "74", "20", "680", "697", "713"], "solutions": ["The client software should not install untrusted code from a non-authenticated server.", "The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.", "Perform input validation for length of buffer inputs.", "Use a language or compiler that performs automatic bounds checking.", "Use an abstraction library to abstract away risky APIs. Not a complete solution.", "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.", "Ensure all buffer uses are consistently bounds-checked.", "Use OS-level preventative functionality. Not a complete solution."], "id": "14", "prerequisites": ["The targeted client software communicates with an external server.", "The targeted client software has a buffer overflow vulnerability."], "summary": ["This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service."], "name": "Client-side Injection-induced Buffer Overflow"}, {"related_weakness": ["97", "74", "20", "713"], "solutions": ["Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them", "All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive", "Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead"], "id": "101", "prerequisites": ["A web server that supports server side includes and has them enabled", "User controllable input that can carry include directives to the web server"], "summary": ["An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands."], "name": "Server Side Include (SSI) Injection"}, {"related_weakness": ["79", "117", "74", "20"], "solutions": ["Cleanse all user supplied data before placing it in the logs. Reject all bad data. Ensure that the data is in the expected form.", "Use proper HTML output encoding techniques to strip the log data of potentially dangerous scripting characters before displaying it in the administrative console", "If possible, disable script execution in the administrative interface."], "id": "106", "prerequisites": ["The system uses a web based interface", "The system does not cleanse / validate user supplied data before writing it to logs", "Information from logs is displayed in a web based interface", "The web based log interface does not HTML output encode the log data prior to displaying it in the administrator console."], "summary": ["An attacker may leverage a system weakness where logs are susceptible to log injection to insert scripts into the system's logs. If these logs are later viewed by an administrator through a thin administrative interface and the log data is not properly HTML encoded before being written to the page, the attackers' scripts stored in the log will be executed in the administrative interface with potentially serious consequences. This attack pattern is really a combination of two other attack patterns: log injection and stored cross site scripting."], "name": "Cross Site Scripting through Log Files"}, {"related_weakness": ["89", "74", "20", "78", "114"], "solutions": ["Disable MSSQL xp_cmdshell directive on the database", "Properly validate the data (syntactically and semantically) before writing it to the database.", "Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument)."], "id": "108", "prerequisites": ["The application does not properly validate data before storing in the database", "Backend application implicitly trusts the data stored in the database", "Malicious data is used on the backend as a command line argument"], "summary": ["An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host."], "name": "Command Line Execution through SQL Injection"}], "id": "CVE-2016-2204", "Published": "2016-04-22T14:59:06.223-04:00", "map_cve_scip": {"sciplink": "http://www.scip.ch/en/?vuldb.82780", "scipid": "82780"}, "summary": "The management console on Symantec Messaging Gateway (SMG) Appliance devices before 10.6.1 allows local users to obtain root-shell access via crafted terminal-window input."}