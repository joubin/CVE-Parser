{"Modified": "2016-09-18T21:59:03.807-04:00", "summary": "ABB DataManagerPro 1.x before 1.7.1 allows local users to gain privileges by replacing a DLL file in the package directory.", "vulnerable_configuration_cpe_2_2": ["cpe:/a:trane:tracer_sc:4.2.1134"], "last-modified": "2016-11-28T15:18:37.307-05:00", "references": ["http://www.securityfocus.com/bid/92980", "https://ics-cert.us-cert.gov/advisories/ICSA-16-259-02", "https://library.e.abb.com/public/93e52dbfd6ab4f64aa435973ccf1b6e2/9ADB005557_ABB_SoftwareVulnerabilityHandlingAdvisory_DMPro.pdf"], "ranking": [[{"circl": 2}]], "cwe": "CWE-427", "cvss": "6.9", "capec": [{"related_weakness": ["426", "427", "428", "706"], "solutions": ["Design: Enforce principle of least privilege", "Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program", "Implementation: Host integrity monitoring"], "id": "38", "prerequisites": ["The attacker must be able to write to redirect search paths on the victim host."], "summary": ["This attack loads a malicious resource into a program's standard path used to bootstrap and/or provide contextual information for a program like a path variable or classpath. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.", "A standard UNIX path looks similar to this", "If the attacker modifies the path variable to point to a locale that includes malicious resources then the user unwittingly can execute commands on the attackers' behalf:", "This is a form of usurping control of the program and the attack can be done on the classpath, database resources, or any other resources built from compound parts. At runtime detection and blocking of this attack is nearly impossible, because the configuration allows execution."], "name": "Leveraging/Manipulating Configuration File Search Paths"}, {"related_weakness": ["427", "706"], "solutions": ["Design: Sign system DLLs so that unauthorized DLLs can be detected."], "id": "471", "prerequisites": ["Attacker has a mechanism to place its malicious DLLs in the needed location on the file system"], "summary": ["The attacker exploits the functionality of the Windows DLL loader where the process loading the DLL searches for the DLL to be loaded first in the same directory in which the process binary resides and then in other directories (e.g., System32). Exploitation of this preferential search order can allow an attacker to make the loading process load the attackers' rogue DLL rather than the legitimate DLL.", "For instance, an attacker with access to the file system may place a malicious ntshrui.dll in the C:\\Windows directory. This DLL normally resides in the System32 folder. Process explorer.exe which also resides in C:\\Windows, upon trying to load the ntshrui.dll from the System32 folder will actually load the DLL supplied by the attacker simply because of the preferential search order. Since the attacker has placed its malicious ntshrui.dll in the same directory as the loading explorer.exe process, the DLL supplied by the attacker will be found first and thus loaded in lieu of the legitimate DLL. Since explorer.exe is loaded during the boot cycle, the attackers' malware is guaranteed to execute.", "This attack can be leveraged with many different DLLs and with many different loading processes. No forensic trails are left in the system's registry or file system that an incorrect DLL had been loaded."], "name": "DLL Search Order Hijacking"}], "id": "CVE-2016-4526", "Published": "2016-09-18T21:59:02.790-04:00", "vulnerable_configuration": [{"title": "cpe:2.3:a:trane:tracer_sc:4.2.1134", "id": "cpe:2.3:a:trane:tracer_sc:4.2.1134"}]}