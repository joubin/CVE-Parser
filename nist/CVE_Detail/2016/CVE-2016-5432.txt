{"Modified": "2016-10-03T14:59:08.770-04:00", "summary": "The ovirt-engine-provisiondb utility in Red Hat Enterprise Virtualization (RHEV) Engine 4.0 allows local users to obtain sensitive database provisioning information by reading log files.", "vulnerable_configuration_cpe_2_2": ["cpe:/a:redhat:enterprise_virtualization:4.0", "cpe:/o:redhat:enterprise_linux:7.0"], "last-modified": "2016-11-28T15:25:15.877-05:00", "references": ["http://rhn.redhat.com/errata/RHSA-2016-1967.html", "http://www.securityfocus.com/bid/92694", "https://bugzilla.redhat.com/show_bug.cgi?id=1371428", "https://gerrit.ovirt.org/#/q/I40c88ad48f8f7c2b8e06802137870b0c198b5129"], "ranking": [[{"circl": 2}]], "cwe": "CWE-532", "cvss": "2.1", "capec": [{"related_weakness": ["209", "532"], "solutions": ["Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.", "Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.", "Implementation: Obfuscate server fields of HTTP response.", "Implementation: Hide inner ordering of HTTP response header.", "Implementation: Customizing HTTP error codes such as 404 or 500.", "Implementation: Hide HTTP response header software information filed.", "Implementation: Hide cookie's software information filed.", "Implementation: Obfuscate database type in Database API's error message."], "id": "215", "prerequisites": ["The target application must fail to sanitize incoming messages adequately before processing."], "summary": ["An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. By observing logs and error messages, the attacker can learn details about the configuration of the target application and might be able to cause the target to disclose sensitive information."], "name": "Fuzzing and observing application log data/errors for application mapping"}], "id": "CVE-2016-5432", "Published": "2016-10-03T14:59:07.677-04:00", "vulnerable_configuration": [{"title": "cpe:2.3:a:redhat:enterprise_virtualization:4.0", "id": "cpe:2.3:a:redhat:enterprise_virtualization:4.0"}, {"title": "Red Hat Enterprise Linux (RHEL) 7.0 (7)", "id": "cpe:2.3:o:redhat:enterprise_linux:7.0"}]}