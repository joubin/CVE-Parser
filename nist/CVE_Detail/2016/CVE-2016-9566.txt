{"Modified": "2016-12-15T17:59:00.553-05:00", "summary": "base/logging.c in Nagios Core before 4.2.4 allows local users with access to an account in the nagios group to gain root privileges via a symlink attack on the log file.  NOTE: this can be leveraged by remote attackers using CVE-2016-9565.", "vulnerable_configuration_cpe_2_2": ["cpe:/a:nagios:nagios:4.2.3"], "last-modified": "2016-12-16T14:10:37.973-05:00", "references": ["http://seclists.org/fulldisclosure/2016/Dec/58", "http://www.securityfocus.com/bid/94919", "https://bugzilla.redhat.com/show_bug.cgi?id=1402869", "https://github.com/NagiosEnterprises/nagioscore/commit/c29557dec91eba2306f5fb11b8da4474ba63f8c4", "https://legalhackers.com/advisories/Nagios-Exploit-Root-PrivEsc-CVE-2016-9566.html", "https://www.nagios.org/projects/nagios-core/history/4x/"], "ranking": [[{"circl": 2}]], "cwe": "CWE-59", "cvss": "7.2", "capec": [{"related_weakness": ["94", "96", "95", "97", "272", "59", "282", "275", "264", "270", "714"], "solutions": ["Design: Enforce principle of least privilege", "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.", "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.", "Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.", "Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute."], "id": "35", "prerequisites": ["The attacker must have the ability to modify non-executable files consumed by the target software."], "summary": ["An attack of this type exploits a system's trust in configuration and resource files, when the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.", "The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser. Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/)", "http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here", "The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client's browser process.", "The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name \"public\" grants all users with the public role the ability to use the administration functionality.", "The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control."], "name": "Leverage Executable Code in Non-Executable Files"}, {"related_weakness": ["23", "22", "73", "77", "346", "348", "285", "264", "272", "59", "74", "15", "715"], "solutions": ["Design: Enforce principle of least privilege.", "Design: Ensure all input is validated, and does not contain file system commands", "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.", "Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.", "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."], "id": "76", "prerequisites": ["Program must allow for user controlled variables to be applied directly to the filesystem"], "summary": ["An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible."], "name": "Manipulating Input to File System Calls"}, {"related_weakness": ["59"], "solutions": ["Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.", "Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions."], "id": "132", "prerequisites": ["The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The attacker must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear."], "summary": ["An attacker positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name. The endpoint file may be either output or input. If the file is output, the result is that the endpoint is modified, instead of a file at the intended location. Modifications to the endpoint file may include appending, overwriting, corrupting, changing permissions, or other modifications. In some variants of this attack the attacker may be able to control the change to a file while in other cases they cannot. The former is especially damaging since the attacker may be able to grant themselves increased privileges or insert false information, but the latter can also be damaging as it can expose sensitive information or corrupt or destroy vital system or application files. Alternatively, the endpoint file may serve as input to the targeted application. This can be used to feed malformed input into the target or to cause the target to process different information, possibly allowing the attacker to control the actions of the target or to cause the target to expose information to the attacker. Moreover, the actions taken on the endpoint file are undertaken with the permissions of the targeted user or application, which may exceed the permissions that the attacker would normally have."], "name": "Symlink Attack"}, {"related_weakness": ["732", "285", "272", "59", "282", "275", "264", "270", "693"], "solutions": ["Design: Enforce principle of least privilege", "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.", "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."], "id": "17", "prerequisites": ["System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment."], "summary": ["An attack of this type exploits a system's configuration that allows an attacker to either directly access an executable file, for example through shell access; or in a possible worst case allows an attacker to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface."], "name": "Accessing, Modifying or Executing Executable Files"}], "id": "CVE-2016-9566", "Published": "2016-12-15T17:59:00.537-05:00", "vulnerable_configuration": [{"title": "Nagios 4.2.3", "id": "cpe:2.3:a:nagios:nagios:4.2.3"}]}