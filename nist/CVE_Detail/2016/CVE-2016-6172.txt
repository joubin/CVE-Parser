{"Modified": "2016-09-26T12:59:05.963-04:00", "vulnerable_configuration": [{"title": "Novell openSUSE 13.2", "id": "cpe:2.3:o:novell:opensuse:13.2"}, {"title": "Novell Leap 42.1", "id": "cpe:2.3:o:novell:leap:42.1"}, {"title": "PowerDNS Authoritative Server 4.0.0", "id": "cpe:2.3:a:powerdns:authoritative_server:4.0.0"}], "vulnerable_configuration_cpe_2_2": ["cpe:/o:novell:opensuse:13.2", "cpe:/o:novell:leap:42.1", "cpe:/a:powerdns:authoritative_server:4.0.0"], "last-modified": "2016-11-28T15:30:50.980-05:00", "map_cve_openvas": {"openvas_script_file": "gb_powerdns_dos_vuln.nasl", "openvas_script_family": "Denial of Service", "openvas_script_id": "841499", "openvas_script_name": "PowerDNS AXFR Response Denial of Service Vulnerability"}, "map_cve_nessus": {"nessus_script_family": "Fedora Local Security Checks", "nessus_script_file": "fedora_2016-7098bdc536.nasl", "nessus_script_id": "92803", "nessus_script_name": "Fedora 24 : pdns (2016-7098bdc536)"}, "references": ["http://lists.opensuse.org/opensuse-updates/2016-08/msg00085.html", "http://www.openwall.com/lists/oss-security/2016/07/06/3", "http://www.securityfocus.com/bid/91678", "https://doc.powerdns.com/md/changelog/#powerdns-authoritative-server-401", "https://github.com/PowerDNS/pdns/issues/4128", "https://github.com/PowerDNS/pdns/issues/4133", "https://github.com/PowerDNS/pdns/pull/4134", "https://github.com/sischkg/xfer-limit/blob/master/README.md", "https://lists.dns-oarc.net/pipermail/dns-operations/2016-July/015058.html"], "ranking": [[{"circl": 2}]], "cwe": "CWE-400", "cvss": "7.1", "capec": [{"related_weakness": ["400", "770"], "solutions": ["Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.", "Implementation: Disable altogether the use of inline DTD schemas in your XML parsing objects. If must use DTD, normalize, filter and white list and parse with methods and routines that will detect entity expansion from untrusted sources."], "id": "197", "prerequisites": ["This type of attack requires that the target must receive XML input but either fail to provide an upper limit for entity expansion or provide a limit that is so large that it does not preclude significant resource consumption."], "summary": ["An attacker submits an XML document to a target application where the XML document uses nested entity expansion to produce an excessively large output XML. XML allows the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory."], "name": "XML Entity Expansion"}, {"related_weakness": ["400"], "solutions": ["Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.", "When implementing security features, consider how they can be misused and made to turn on themselves."], "id": "2", "prerequisites": ["The system has a lockout mechanism.", "An attacker must be able to reproduce behavior that would result in an account being locked."], "summary": ["An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks."], "name": "Inducing Account Lockout"}, {"related_weakness": ["674", "400", "770"], "solutions": ["Design: Utilize a Security Pipeline Interface (SPI) to mediate communications between service requester and service provider The SPI should be designed to throttle up and down and handle a variety of payloads.", "Design: Utilize clustered and fail over techniques, leverage network transports to provide availability such as HTTP load balancers", "Implementation: Check size of XML message before parsing"], "id": "82", "prerequisites": ["Attacker must be able to send a malicious XML payload to host, such as SOAP or REST web service."], "summary": ["XML Denial of Service (XDoS) can be applied to any technology that utilizes XML data. This is, of course, most distributed systems technology including Java, .Net, databases, and so on. XDoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious XML payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. The main weakness in XDoS is that the service provider generally must inspect, parse, and validate the XML messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that XDoS targets.", "There are three primary attack vectors that XDoS can navigate", "Target CPU through recursion: attacker creates a recursive payload and sends to service provider", "Target memory through jumbo payloads: service provider uses DOM to parse XML. DOM creates in memory representation of XML document, but when document is very large (for example, north of 1 Gb) service provider host may exhaust memory trying to build memory objects.", "XML Ping of death: attack service provider with numerous small files that clog the system.", "All of the above attacks exploit the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends."], "name": "Violating Implicit Assumptions Regarding XML Content (aka XML Denial of Service (XDoS))"}, {"related_weakness": ["400", "770"], "solutions": ["Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.", "Implementation: Provide for network flow control and traffic shaping to control access to the resources."], "id": "147", "prerequisites": ["The target must receive and process XML transactions."], "summary": ["An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target."], "name": "XML Ping of the Death"}], "id": "CVE-2016-6172", "Published": "2016-09-26T12:59:04.947-04:00", "summary": "PowerDNS (aka pdns) Authoritative Server before 4.0.1 allows remote primary DNS servers to cause a denial of service (memory exhaustion and secondary DNS server crash) via a large (1) AXFR or (2) IXFR response."}