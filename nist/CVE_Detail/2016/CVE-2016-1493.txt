{"Modified": "2016-01-29T15:59:08.543-05:00", "vulnerable_configuration": [{"title": "Intel Driver Update Utility 2.0", "id": "cpe:2.3:a:intel:driver_update_utility:2.0"}, {"title": "Intel Driver Update Utility 2.1", "id": "cpe:2.3:a:intel:driver_update_utility:2.1"}, {"title": "Intel Driver Update Utility 2.2", "id": "cpe:2.3:a:intel:driver_update_utility:2.2"}, {"title": "Intel Driver Update Utility 2.3", "id": "cpe:2.3:a:intel:driver_update_utility:2.3"}], "vulnerable_configuration_cpe_2_2": ["cpe:/a:intel:driver_update_utility:2.0", "cpe:/a:intel:driver_update_utility:2.1", "cpe:/a:intel:driver_update_utility:2.2", "cpe:/a:intel:driver_update_utility:2.3"], "last-modified": "2016-02-25T07:39:16.760-05:00", "map_cve_nessus": {"nessus_script_family": "Windows", "nessus_script_file": "intel_duu_2_4.nasl", "nessus_script_id": "88577", "nessus_script_name": "Intel Driver Update Utility 2.x < 2.4 Cleartext Download MitM"}, "references": ["https://security-center.intel.com/advisory.aspx?intelid=INTEL-SA-00048&languageid=en-fr", "http://www.securityfocus.com/archive/1/archive/1/537327/100/0/threaded", "http://www.coresecurity.com/advisories/intel-driver-update-utility-mitm", "http://seclists.org/fulldisclosure/2016/Jan/56", "http://packetstormsecurity.com/files/135314/Intel-Driver-Update-Utility-2.2.0.5-Man-In-The-Middle.html"], "ranking": [[{"circl": 2}]], "cwe": "CWE-345", "cvss": "7.6", "capec": [{"related_weakness": ["79", "345", "646"], "solutions": [], "id": "209", "prerequisites": ["The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file.", "The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content."], "summary": ["An attacker creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. Some browsers will detect that the specified MIME type of the file does not match the actual type of the content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the attackers' script may run on the target unsanitized. For example, the MIME type text/plain may be used where the actual content is text/javascript or text/html. Since text does not contain scripting instructions, the stated MIME type would indicate that filtering is unnecessary. However, if the target application subsequently determines the file's real type and invokes the appropriate interpreter, scripted content could be invoked. In another example, img tags in HTML content could reference a renderable type file instead of an expected image file. The file extension and MIME type can describe an image file, but the file content can be text/javascript or text/html resulting in script execution. If the browser assumes all references in img tags are images, and therefore do not need to be filtered for scripts, this would bypass content filters. In a cross-site scripting attack, the attacker tricks the victim into accessing a URL that uploads a script file with an incorrectly specified MIME type. If the victim's browser switches to the appropriate interpreter without filtering, the attack will execute as a standard XSS attack, possibly revealing the victim's cookies or executing arbitrary script in their browser."], "name": "Cross-Site Scripting Using MIME Type Mismatch"}, {"related_weakness": ["345"], "solutions": ["Implementation: Clients should only trust UDDI, ebXML, or similar messages that are verifiably signed by a trusted party."], "id": "218", "prerequisites": ["The targeted business's UDDI or ebXML information must be served from a location that the attacker can spoof or compromise or the attacker must be able to intercept and modify unsecured UDDI/ebXML messages in transit."], "summary": ["An attacker spoofs a UDDI, ebXML, or similar message in order to impersonate a service provider in an e-business transaction. UDDI, ebXML, and similar standards are used to identify businesses in e-business transactions. Among other things, they identify a particular participant, WSDL information for SOAP transactions, and supported communication protocols, including security protocols. By spoofing one of these messages an attacker could impersonate a legitimate business in a transaction or could manipulate the protocols used between a client and business. This could result in disclosure of sensitive information, loss of message integrity, or even financial fraud."], "name": "Spoofing of UDDI/ebXML Messages"}, {"related_weakness": ["471", "345", "346", "602", "311"], "solutions": [], "id": "384", "prerequisites": ["Targeted software is utilizing application framework APIs"], "summary": ["An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system. Despite the use of MITM software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true \"Man-in-the-Middle\" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client."], "name": "Application API Message Manipulation via Man-in-the-Middle"}, {"related_weakness": ["471", "345", "346", "602", "311"], "solutions": [], "id": "385", "prerequisites": ["Targeted software is utilizing application framework APIs"], "summary": ["An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process."], "name": "Transaction or Event Tampering via Application API Manipulation"}, {"related_weakness": ["471", "345", "346", "602", "311"], "solutions": [], "id": "386", "prerequisites": ["Targeted software is utilizing application framework APIs"], "summary": ["An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud."], "name": "Application API Navigation Remapping"}, {"related_weakness": ["471", "345", "346", "602", "311"], "solutions": [], "id": "387", "prerequisites": ["Targeted software is utilizing application framework APIs"], "summary": ["An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. When the goal is to spread malware, deceptive content is created such as modified links, buttons, or images, that entice users to click on those items, all of which point to a malicious URI. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the destination of various application interface elements."], "name": "Navigation Remapping To Propagate Malicious Content"}, {"related_weakness": ["471", "345", "346", "602", "311"], "solutions": [], "id": "388", "prerequisites": ["Targeted software is utilizing application framework APIs"], "summary": ["An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination. For example, an in-game event occurs and the attacker traps the result, which turns out to be a form that will be populated to their primary profile. The attacker, using a MITM proxy, observes the following data:", "By altering the destination of \"Claim_Link\" to point to the attackers' server an unwitting victim can be enticed to click the link. Another example would be for the attacker to rewrite the button destinations for an event so that clicking \"Yes\" or \"No\" causes the user to load the attackers' code."], "name": "Application API Button Hijacking"}, {"related_weakness": ["345", "346", "602", "311"], "solutions": [], "id": "389", "prerequisites": ["Targeted software is utilizing application framework APIs"], "summary": ["An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system."], "name": "Content Spoofing Via Application API Manipulation"}, {"related_weakness": ["291", "180", "41", "345", "697", "707"], "solutions": ["Design: Default deny access control policies", "Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)", "Implementation: Perform input validation for all remote content."], "id": "4", "prerequisites": ["The target software must fail to anticipate all of the possible valid encodings of an IP/web address."], "summary": ["This attack relies on the attacker using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names, URL, IP address, or IP Address ranges. The issue that the attacker can exploit is that these design assumptions may not be validated against a variety of different possible encodings and network address location formats. Applications that use naming for creating policy namespaces for managing access control may be susceptible to being queried directly by IP addresses, which is ultimately a more generally authoritative way of communicating on a network.", "Alternative IP addresses can be used by the attacker to bypass application access control in order to gain access to data that is only protected by obscuring its location.", "In addition this type of attack can be used as a reconnaissance mechanism to provide entry point information that the attacker gathers to penetrate deeper into the system."], "name": "Using Alternative IP Address Encodings"}, {"related_weakness": ["345", "346", "352"], "solutions": ["Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.", "On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).", "Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.", "Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario."], "id": "111", "prerequisites": ["JSON is used as a transport mechanism between the client and the server", "The target server cannot differentiate real requests from forged requests", "The JSON object returned from the server can be accessed by the attackers' malicious code via a script tag"], "summary": ["An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.", "An attacker gets the victim to visit his or her malicious page that contains a script tag whose source points to the vulnerable system with a URL that requests a response from the server containing a JSON object with possibly confidential information. The malicious page also contains malicious code to capture the JSON object returned by the server before any other processing on it can take place, typically by overriding the JavaScript function used to create new objects. This hook allows the malicious code to get access to the creation of each object and transmit the possibly sensitive contents of the captured JSON object to the attackers' server.", "There is nothing in the browser's security model to prevent the attackers' malicious JavaScript code (originating from attacker's domain) to set up an environment (as described above) to intercept a JSON object response (coming from the vulnerable target system's domain), read its contents and transmit to the attackers' controlled site. The same origin policy protects the domain object model (DOM), but not the JSON."], "name": "JSON Hijacking (aka JavaScript Hijacking)"}, {"related_weakness": ["348", "345", "349", "346", "441"], "solutions": ["Configuration: Disable client side caching.", "Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes."], "id": "141", "prerequisites": ["The attacker must be able to modify the value stored in a cache to match a desired value.", "The targeted application must not be able to detect the illicit modification of the cache and must trust the cache value in its calculations."], "summary": ["An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value."], "name": "Cache Poisoning"}, {"related_weakness": ["348", "345", "349", "346", "441", "350"], "solutions": ["Configuration: Make sure your DNS servers have been updated to the latest versions", "Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.", "Configuration: Disable client side DNS caching."], "id": "142", "prerequisites": ["Client applications must trust the corrupted cashed values and utilize them for their domain name resolutions."], "summary": ["A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An attacker modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the attacker specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Attackers can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack."], "name": "DNS Cache Poisoning"}], "id": "CVE-2016-1493", "Published": "2016-01-29T15:59:07.577-05:00", "map_cve_scip": {"sciplink": "http://www.scip.ch/en/?vuldb.80749", "scipid": "80749"}, "summary": "Intel Driver Update Utility before 2.4 retrieves driver updates in cleartext, which makes it easier for man-in-the-middle attackers to execute arbitrary code via a crafted file."}