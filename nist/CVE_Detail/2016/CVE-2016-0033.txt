{"cvss": "5.0", "map_cve_nessus": {"nessus_script_name": "MS16-019: Security Update for .NET Framework to Address Denial of Service (3137893)", "nessus_script_family": "Windows : Microsoft Bulletins", "nessus_script_id": "88651", "nessus_script_file": "smb_nt_ms16-019.nasl"}, "vulnerable_configuration_cpe_2_2": ["cpe:/a:microsoft:.net_framework:4.6.1", "cpe:/a:microsoft:.net_framework:4.6", "cpe:/a:microsoft:.net_framework:4.5.2", "cpe:/a:microsoft:.net_framework:3.5.1", "cpe:/a:microsoft:.net_framework:3.5", "cpe:/a:microsoft:.net_framework:2.0:sp2"], "map_cve_mskb": {"mskbtitle": "Security Update for .NET Framework to Address Denial of Service", "mskbid": "3137893"}, "ranking": [[{"circl": 2}]], "references": ["http://technet.microsoft.com/security/bulletin/MS16-019", "http://www.securitytracker.com/id/1034983"], "vulnerable_configuration": [{"id": "cpe:2.3:a:microsoft:.net_framework:4.6.1", "title": "Microsoft .NET Framework 4.6.1"}, {"id": "cpe:2.3:a:microsoft:.net_framework:4.6", "title": "Microsoft .net Framework 4.6"}, {"id": "cpe:2.3:a:microsoft:.net_framework:4.5.2", "title": "Microsoft .net Framework 4.5.2"}, {"id": "cpe:2.3:a:microsoft:.net_framework:3.5.1", "title": "Microsoft .net Framework 3.5.1"}, {"id": "cpe:2.3:a:microsoft:.net_framework:3.5", "title": "Microsoft .net Framework 3.5"}, {"id": "cpe:2.3:a:microsoft:.net_framework:2.0:sp2", "title": "Microsoft .NET Framework 2.0 Service Pack 2"}], "Published": "2016-02-10T06:59:01.297-05:00", "Modified": "2016-02-10T06:59:02.377-05:00", "map_cve_ms": {"msid": "MS16-019", "mstitle": "Security Update for .NET Framework to Address Denial of Service"}, "capec": [{"name": "Leverage Executable Code in Non-Executable Files", "summary": ["An attack of this type exploits a system's trust in configuration and resource files, when the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.", "The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser. Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/)", "http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here", "The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client's browser process.", "The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name \"public\" grants all users with the public role the ability to use the administration functionality.", "The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control."], "solutions": ["Design: Enforce principle of least privilege", "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.", "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.", "Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.", "Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute."], "prerequisites": ["The attacker must have the ability to modify non-executable files consumed by the target software."], "related_weakness": ["94", "96", "95", "97", "272", "59", "282", "275", "264", "270", "714"], "id": "35"}, {"name": "Manipulating User-Controlled Variables", "summary": ["This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An attacker can override environment variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the attacker can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables."], "solutions": ["If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.", "A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.", "Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.", "Use encapsulation when declaring your variables. This is to lower the exposure of your variables.", "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should be rejected by the program."], "prerequisites": ["A variable consumed by the application server is exposed to the client.", "A variable consumed by the application server can be overwritten by the user.", "The application server trusts user supplied data to compute business logic.", "The application server does not perform proper input validation."], "related_weakness": ["473", "15", "285", "302", "94", "96"], "id": "77"}], "map_cve_openvas": {"openvas_script_file": "gb_dotnet_framework_ms16-019.nasl", "openvas_script_name": "Microsoft .NET Framework Denial of Service Vulnerabilities (3137893)", "openvas_script_family": "Windows : Microsoft Bulletins", "openvas_script_id": "103306"}, "summary": "Microsoft .NET Framework 2.0 SP2, 3.5, 3.5.1, 4.5.2, 4.6, and 4.6.1 does not prevent recursive compilation of XSLT transforms, which allows remote attackers to cause a denial of service (performance degradation) via crafted XSLT data, aka \".NET Framework Stack Overflow Denial of Service Vulnerability.\"", "map_cve_scip": {"sciplink": "http://www.scip.ch/en/?vuldb.80876", "scipid": "80876"}, "id": "CVE-2016-0033", "last-modified": "2016-12-05T22:04:25.507-05:00", "cwe": "CWE-94"}