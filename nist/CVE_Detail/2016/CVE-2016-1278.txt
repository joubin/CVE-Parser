{"Modified": "2016-08-05T11:59:06.957-04:00", "vulnerable_configuration": [{"title": "Juniper Junos 12.1X46 D45", "id": "cpe:2.3:o:juniper:junos:12.1x46:d45"}], "vulnerable_configuration_cpe_2_2": ["cpe:/o:juniper:junos:12.1x46:d45"], "last-modified": "2016-08-12T09:41:01.417-04:00", "map_cve_openvas": {"openvas_script_file": "gb_junos_cve-2016-1278.nasl", "openvas_script_family": "JunOS Local Security Checks", "openvas_script_id": "11730", "openvas_script_name": "Junos SRX Series: Possible Unauthenticated Root Login Vulnerability"}, "map_cve_nessus": {"nessus_script_family": "Junos Local Security Checks", "nessus_script_file": "juniper_jsa10753.nasl", "nessus_script_id": "92521", "nessus_script_name": "Juniper Junos SRX Series Upgrade Handling Local Root Authentication Bypass (JSA10753)"}, "references": ["http://kb.juniper.net/InfoCenter/index?page=content&id=JSA10753", "http://www.securityfocus.com/bid/91757", "http://www.securitytracker.com/id/1036307"], "ranking": [[{"circl": 2}]], "cwe": "CWE-287", "map_cve_bid": {"bidid": "91757"}, "cvss": 6.9, "capec": [{"related_weakness": ["290", "287", "20", "200", "693"], "solutions": ["Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.", "Design: Do not rely on client validation or encoding for security purposes.", "Design: Utilize digital signatures to increase authentication assurance.", "Design: Utilize two factor authentication to increase authentication assurance.", "Implementation: Perform input validation for all remote content."], "id": "22", "prerequisites": ["Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side."], "summary": ["An attack of this type exploits a programs' vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client.", "An attacker executes this type of attack by placing themselves in the communication channel between client and server such that communication directly to the server is possible where the server believes it is communicating only with a valid client.", "There are numerous variations of this type of attack."], "name": "Exploiting Trust in Client (aka Make the Client Invisible)"}, {"related_weakness": ["300", "287", "724", "693"], "solutions": ["Implementation: Implement message level security such as HMAC in the HTTP communication", "Design: Utilize defense in depth, do not rely on a single security mechanism like SSL", "Design: Enforce principle of least privilege"], "id": "57", "prerequisites": ["Opportunity to intercept must exist beyond the point where SSL is terminated.", "The attacker must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path."], "summary": ["This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to place man in the middle once SSL is terminated. Rest applications premise is that they leverage existing infrastructure to deliver web services functionality. An example of this is a Rest application that uses HTTP Get methods and receives a HTTP response with an XML document. These Rest style web services are deployed on existing infrastructure such as Apache and IIS web servers with no SOAP stack required. Unfortunately from a security standpoint, there frequently is no interoperable identity security mechanism deployed, so Rest developers often fall back to SSL to deliver security. In large data centers, SSL is typically terminated at the edge of the network - at the firewall, load balancer, or router. Once the SSL is terminated the HTTP request is in the clear (unless developers have hashed or encrypted the values, but this is rare). The attacker can utilize a sniffer such as Wireshark to snapshot the credentials, such as username and password that are passed in the clear once SSL is terminated.", "Once the attacker gathers these credentials, they can submit requests to the web service provider just as authorized user do. There is not typically an authentication on the client side, beyond what is passed in the request itself so once this is compromised, then this is generally sufficient to compromise the service's authentication scheme."], "name": "Utilizing REST's Trust in the System Resource to Register Man in the Middle"}, {"related_weakness": ["300", "290", "593", "287", "294", "724"], "solutions": ["Get your Public Key signed by a Certificate Authority", "Encrypt your communication using cryptography (SSL,...)", "Use Strong mutual authentication to always fully authenticate both ends of any communications channel.", "Exchange public keys using a secure channel"], "id": "94", "prerequisites": ["There are two components communicating with each other.", "An attacker is able to identify the nature and mechanism of communication between the two target components.", "An attacker can eavesdrop on the communication between the target components.", "Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.", "The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption."], "summary": ["This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed on to the other component as if it was never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identify between two components."], "name": "Man in the Middle Attack"}, {"related_weakness": ["287"], "solutions": [], "id": "114", "prerequisites": ["An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc. which is flawed in some way."], "summary": ["An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker. This attack may exploit assumptions made by the target's authentication procedures, such as assumptions regarding trust relationships or assumptions regarding the generation of secret values. This attack differs from Authentication Bypass attacks in that Authentication Abuse allows the attacker to be certified as a valid user through illegitimate means, while Authentication Bypass allows the user to access protected material without ever being certified as an authenticated user. This attack does not rely on prior sessions established by successfully authenticating users, as relied upon for the \"Exploitation of Session Variables, Resource IDs and other Trusted Credentials\" attack patterns."], "name": "Authentication Abuse"}], "id": "CVE-2016-1278", "Published": "2016-08-05T11:59:05.537-04:00", "map_cve_scip": {"sciplink": "http://www.scip.ch/en/?vuldb.89248", "scipid": "89248"}, "summary": "Juniper Junos OS before 12.1X46-D50 on SRX Series devices reverts to \"safe mode\" authentication and allows root CLI logins without a password after a failed upgrade to 12.1X46, which might allow local users to gain privileges by leveraging use of the \"request system software\" command with the \"partition\" option."}