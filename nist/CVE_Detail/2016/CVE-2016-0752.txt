{"Modified": "2016-02-15T21:59:07.657-05:00", "vulnerable_configuration": [{"title": "Ruby on Rails 5.0.0 Beta 1", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:5.0.0:beta1"}, {"title": "Ruby On Rails 4.2.5 Release Candidate 2", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.2.5:rc2"}, {"title": "Ruby On Rails 4.2.5 Release Candidate 1", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.2.5:rc1"}, {"title": "Ruby on Rails 4.2.5", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.2.5"}, {"title": "Ruby On Rails 4.2.4 Release Candidate 1", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.2.4:rc1"}, {"title": "Ruby on Rails 4.2.4", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.2.4"}, {"title": "Ruby on Rails 4.2.3 Release Candidate 1", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.2.3:rc1"}, {"title": "Ruby on Rails 4.2.3", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.2.3"}, {"title": "Ruby on Rails 4.2.2", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.2.2"}, {"title": "Ruby on Rails 4.2.1", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.2.1"}, {"title": "Ruby on Rails 4.2.0 beta 1", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.2.0:beta1"}, {"title": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.14", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.14"}, {"title": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.13", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.13"}, {"title": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.12", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.12"}, {"title": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.10", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.10"}, {"title": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.9", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.9"}, {"title": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.11", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.11"}, {"title": "Ruby on Rails 4.1.2", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.2"}, {"title": "Ruby on Rails 4.1.8", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.8"}, {"title": "Ruby on Rails Ruby on Rails 4.1.7", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.7"}, {"title": "Ruby on Rails 4.1.6 Release Candidate 1", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.6:rc1"}, {"title": "Ruby on Rails 4.1.5", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.5"}, {"title": "Ruby on Rails 4.1.4", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.4"}, {"title": "Ruby on Rails 4.1.3", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.3"}, {"title": "Ruby on Rails 4.1.2 Release Candidate 3", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.2:rc3"}, {"title": "Ruby on Rails 4.1.2 Release Candidate 2", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.2:rc2"}, {"title": "Ruby on Rails 4.1.2 Release Candidate 1", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.2:rc1"}, {"title": "Ruby on Rails 4.1.1", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.1"}, {"title": "Ruby on Rails 4.1.0 beta 1", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.0:beta1"}, {"title": "Ruby on Rails 4.1.0", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.1.0"}, {"title": "Ruby on Rails 4.0.9", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.9"}, {"title": "Ruby on Rails 4.0.8", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.8"}, {"title": "Ruby on Rails 4.0.7", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.7"}, {"title": "Ruby on Rails 4.0.6 Release Candidate 3", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.6:rc3"}, {"title": "Ruby on Rails 4.0.6 Release Candidate 2", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.6:rc2"}, {"title": "Ruby on Rails 4.0.6  Release Candidate 1", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.6:rc1"}, {"title": "Ruby on Rails 4.0.6", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.6"}, {"title": "Ruby on Rails 4.0.5", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.5"}, {"title": "Ruby on Rails 4.0.4", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.4"}, {"title": "Ruby on Rails 4.0.3", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.3"}, {"title": "Ruby on Rails 4.0.2", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.2"}, {"title": "Ruby on Rails 4.0.10 Release Candidate 1", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.10:rc1"}, {"title": "Ruby on Rails 4.0.1 Release Candidate 4", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.1:rc4"}, {"title": "Ruby on Rails 4.0.1 Release Candidate 3", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.1:rc3"}, {"title": "Ruby on Rails 4.0.1 Release Candidate 2", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.1:rc2"}, {"title": "Ruby on Rails 4.0.1 Release Candidate 1", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.1:rc1"}, {"title": "Ruby on Rails  4.0.1", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.1"}, {"title": "Ruby on Rails 4.0.0 Release Candidate 2", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.0:rc2"}, {"title": "Ruby on Rails 4.0.0 Release Candidate 1", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.0:rc1"}, {"title": "Ruby on Rails 4.0.0 Beta", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.0:beta"}, {"title": "Ruby on Rails  4.0.0", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:4.0.0"}, {"title": "cpe:2.3:a:rubyonrails:ruby_on_rails:3.2.22", "id": "cpe:2.3:a:rubyonrails:ruby_on_rails:3.2.22"}], "vulnerable_configuration_cpe_2_2": ["cpe:/a:rubyonrails:ruby_on_rails:5.0.0:beta1", "cpe:/a:rubyonrails:ruby_on_rails:4.2.5:rc2", "cpe:/a:rubyonrails:ruby_on_rails:4.2.5:rc1", "cpe:/a:rubyonrails:ruby_on_rails:4.2.5", "cpe:/a:rubyonrails:ruby_on_rails:4.2.4:rc1", "cpe:/a:rubyonrails:ruby_on_rails:4.2.4", "cpe:/a:rubyonrails:ruby_on_rails:4.2.3:rc1", "cpe:/a:rubyonrails:ruby_on_rails:4.2.3", "cpe:/a:rubyonrails:ruby_on_rails:4.2.2", "cpe:/a:rubyonrails:ruby_on_rails:4.2.1", "cpe:/a:rubyonrails:ruby_on_rails:4.2.0:beta1", "cpe:/a:rubyonrails:ruby_on_rails:4.1.14", "cpe:/a:rubyonrails:ruby_on_rails:4.1.13", "cpe:/a:rubyonrails:ruby_on_rails:4.1.12", "cpe:/a:rubyonrails:ruby_on_rails:4.1.10", "cpe:/a:rubyonrails:ruby_on_rails:4.1.9", "cpe:/a:rubyonrails:ruby_on_rails:4.1.11", "cpe:/a:rubyonrails:ruby_on_rails:4.1.2", "cpe:/a:rubyonrails:ruby_on_rails:4.1.8", "cpe:/a:rubyonrails:ruby_on_rails:4.1.7", "cpe:/a:rubyonrails:ruby_on_rails:4.1.6:rc1", "cpe:/a:rubyonrails:ruby_on_rails:4.1.5", "cpe:/a:rubyonrails:ruby_on_rails:4.1.4", "cpe:/a:rubyonrails:ruby_on_rails:4.1.3", "cpe:/a:rubyonrails:ruby_on_rails:4.1.2:rc3", "cpe:/a:rubyonrails:ruby_on_rails:4.1.2:rc2", "cpe:/a:rubyonrails:ruby_on_rails:4.1.2:rc1", "cpe:/a:rubyonrails:ruby_on_rails:4.1.1", "cpe:/a:rubyonrails:ruby_on_rails:4.1.0:beta1", "cpe:/a:rubyonrails:ruby_on_rails:4.1.0:-", "cpe:/a:rubyonrails:ruby_on_rails:4.0.9", "cpe:/a:rubyonrails:ruby_on_rails:4.0.8", "cpe:/a:rubyonrails:ruby_on_rails:4.0.7", "cpe:/a:rubyonrails:ruby_on_rails:4.0.6:rc3", "cpe:/a:rubyonrails:ruby_on_rails:4.0.6:rc2", "cpe:/a:rubyonrails:ruby_on_rails:4.0.6:rc1", "cpe:/a:rubyonrails:ruby_on_rails:4.0.6", "cpe:/a:rubyonrails:ruby_on_rails:4.0.5", "cpe:/a:rubyonrails:ruby_on_rails:4.0.4", "cpe:/a:rubyonrails:ruby_on_rails:4.0.3", "cpe:/a:rubyonrails:ruby_on_rails:4.0.2:-", "cpe:/a:rubyonrails:ruby_on_rails:4.0.10:rc1", "cpe:/a:rubyonrails:ruby_on_rails:4.0.1:rc4", "cpe:/a:rubyonrails:ruby_on_rails:4.0.1:rc3", "cpe:/a:rubyonrails:ruby_on_rails:4.0.1:rc2", "cpe:/a:rubyonrails:ruby_on_rails:4.0.1:rc1", "cpe:/a:rubyonrails:ruby_on_rails:4.0.1:-", "cpe:/a:rubyonrails:ruby_on_rails:4.0.0:rc2", "cpe:/a:rubyonrails:ruby_on_rails:4.0.0:rc1", "cpe:/a:rubyonrails:ruby_on_rails:4.0.0:beta", "cpe:/a:rubyonrails:ruby_on_rails:4.0.0:-", "cpe:/a:rubyonrails:ruby_on_rails:3.2.22"], "last-modified": "2016-12-05T22:05:40.297-05:00", "map_cve_openvas": {"openvas_script_file": "gb_fedora_2016_94_rubygem-activemodel_fc22.nasl", "openvas_script_family": "Fedora Local Security Checks", "openvas_script_id": "855474", "openvas_script_name": "Fedora Update for rubygem-activemodel FEDORA-2016-94"}, "map_cve_nessus": {"nessus_script_family": "SuSE Local Security Checks", "nessus_script_file": "openSUSE-2016-159.nasl", "nessus_script_id": "88612", "nessus_script_name": "openSUSE Security Update : rubygem-actionpack-4_2 / rubygem-actionview-4_2 / rubygem-activemodel-4_2 / etc (openSUSE-2016-159)"}, "references": ["http://lists.fedoraproject.org/pipermail/package-announce/2016-February/178044.html", "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/178069.html", "http://lists.opensuse.org/opensuse-security-announce/2016-04/msg00053.html", "http://lists.opensuse.org/opensuse-updates/2016-02/msg00034.html", "http://lists.opensuse.org/opensuse-updates/2016-02/msg00043.html", "http://rhn.redhat.com/errata/RHSA-2016-0296.html", "http://www.debian.org/security/2016/dsa-3464", "http://www.openwall.com/lists/oss-security/2016/01/25/13", "http://www.securityfocus.com/bid/81801", "https://groups.google.com/forum/message/raw?msg=ruby-security-ann/335P1DcLG00/JXcBnTtZEgAJ"], "ranking": [[{"circl": 2}]], "cwe": "CWE-22", "cvss": "5.0", "capec": [{"related_weakness": ["22", "893"], "solutions": ["Design: Configure the access control correctly.", "Design: Enforce principle of least privilege.", "Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.", "Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.", "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.", "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.", "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.", "Implementation: Perform input validation for all remote content, including remote and user-generated content.", "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.", "Implementation: Use indirect references rather than actual file names.", "Implementation: Use possible permissions on file access when developing and deploying web applications.", "Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- whitelisting approach."], "id": "213", "prerequisites": ["The target must leverage and access an underlying file system."], "summary": ["An attacker with access to file system resources, either directly or via application logic, will use various file path specification or navigation mechanisms such as \"..\" in path strings and absolute paths to extend their range of access to inappropriate areas of the file system. The attacker attempts to either explore the file system for recon purposes or access directories and files that are intended to be restricted from their access. Exploring the file system can be achieved through constructing paths presented to directory listing programs, such as \"ls\" and 'dir', or through specially crafted programs that attempt to explore the file system. The attacker engaging in this type of activity is searching for information that can be used later in a more exploitive attack. Access to restricted directories or files can be achieved through modification of path references utilized by system applications."], "name": "Directory Traversal"}, {"related_weakness": ["77", "23", "22", "713", "715"], "solutions": ["Design: Enforce principle of least privilege", "Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)", "Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.", "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.", "Implementation: Virus scanning on host", "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin."], "id": "23", "prerequisites": ["The target software must consume files.", "The attacker must have access to modify files that the target software will consume."], "summary": ["An attack of this type exploits the host's trust in executing remote content including binary files. The files are poisoned with a malicious payload (targeting the file systems accessible by the target software) by the attacker and may be passed through standard channels such as via email, and standard web content like PDF and multimedia files. The attacker exploits known vulnerabilities or handling routines in the target processes. Vulnerabilities of this type have been found in a wide variety of commercial applications from Microsoft Office to Adobe Acrobat and Apple Safari web browser. When the attacker knows the standard handling routines and can identify vulnerabilities and entry points they can be exploited by otherwise seemingly normal content. Once the attack is executed, the attackers' program can access relative directories such as C:\\Program Files or other standard system directories to launch further attacks. In a worst case scenario, these programs are combined with other propagation logic and work as a virus."], "name": "File System Function Injection, Content Based"}, {"related_weakness": ["177", "171", "173", "172", "73", "21", "22", "74", "20", "697", "707"], "solutions": ["Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.", "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.", "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.", "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.", "Refer to the RFCs to safely decode URL.", "Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.", "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)."], "id": "64", "prerequisites": ["The application accepts and decodes URL string request.", "The application performs insufficient filtering/canonicalization on the URLs."], "summary": ["This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL. An URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc."], "name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic"}, {"related_weakness": ["23", "22", "73", "77", "346", "348", "285", "264", "272", "59", "74", "15", "715"], "solutions": ["Design: Enforce principle of least privilege.", "Design: Ensure all input is validated, and does not contain file system commands", "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.", "Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.", "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."], "id": "76", "prerequisites": ["Program must allow for user controlled variables to be applied directly to the filesystem"], "summary": ["An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible."], "name": "Manipulating Input to File System Calls"}, {"related_weakness": ["180", "181", "173", "171", "172", "73", "21", "22", "74", "20", "697", "707"], "solutions": ["Verify that the user-supplied data does not use backslash character to escape malicious characters.", "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.", "Be aware of the threat of alternative method of data encoding.", "Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.", "In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.", "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.", "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names."], "id": "78", "prerequisites": ["The application accepts the backlash character as escape character.", "The application server does incomplete input data decoding, filtering and validation."], "summary": ["This attack targets the use of the backslash in alternate encoding. An attacker can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the attacker tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack."], "name": "Using Escaped Slashes in Alternate Encoding"}, {"related_weakness": ["173", "171", "180", "181", "20", "74", "73", "21", "22", "185", "200", "697", "707"], "solutions": ["Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.", "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.", "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)", "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)", "Test your path decoding process against malicious input.", "In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.", "Assume all input is malicious. Create a white list that defines all valid input to the application based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system."], "id": "79", "prerequisites": ["The application server accepts paths to locate resources.", "The application server does insufficient input data validation on the resource path requested by the user.", "The access right to resources are not set properly."], "summary": ["This attack targets the encoding of the Slash characters. An attacker would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the attacker many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other."], "name": "Using Slashes in Alternate Encoding"}, {"related_weakness": ["22", "20"], "solutions": ["Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement", "Implementation: Perform input validation for all remote content, including remote and user-generated content.", "Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- whitelisting approach.", "Implementation: Prefer working without user input when using file system calls", "Implementation: Use indirect references rather than actual file names.", "Implementation: Use possible permissions on file access when developing and deploying web applications."], "id": "139", "prerequisites": ["The target application must accept a string as user input, fail to sanitize combinations of characters in the input that have a special meaning in the context of path navigation, and insert the user-supplied string into path navigation commands."], "summary": ["An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or \\) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure."], "name": "Relative Path Traversal"}], "id": "CVE-2016-0752", "Published": "2016-02-15T21:59:06.783-05:00", "map_cve_scip": {"sciplink": "http://www.scip.ch/en/?vuldb.80682", "scipid": "80682"}, "summary": "Directory traversal vulnerability in Action View in Ruby on Rails before 3.2.22.1, 4.0.x and 4.1.x before 4.1.14.1, 4.2.x before 4.2.5.1, and 5.x before 5.0.0.beta1.1 allows remote attackers to read arbitrary files by leveraging an application's unrestricted use of the render method and providing a .. (dot dot) in a pathname."}