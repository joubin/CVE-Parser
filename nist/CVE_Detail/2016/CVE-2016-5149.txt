{"Modified": "2016-09-11T06:59:05.347-04:00", "summary": "The extensions subsystem in Google Chrome before 53.0.2785.89 on Windows and OS X and before 53.0.2785.92 on Linux relies on an IFRAME source URL to identify an associated extension, which allows remote attackers to conduct extension-bindings injection attacks by leveraging script access to a resource that initially has the about:blank URL.", "vulnerable_configuration_cpe_2_2": ["cpe:/a:google:chrome:52.0.2743.116", "cpe:/o:novell:leap:42.1"], "last-modified": "2016-11-28T15:23:06.833-05:00", "references": ["http://lists.opensuse.org/opensuse-security-announce/2016-09/msg00003.html", "http://lists.opensuse.org/opensuse-security-announce/2016-09/msg00004.html", "http://lists.opensuse.org/opensuse-security-announce/2016-09/msg00008.html", "http://lists.opensuse.org/opensuse-updates/2016-09/msg00073.html", "http://rhn.redhat.com/errata/RHSA-2016-1854.html", "http://www.debian.org/security/2016/dsa-3660", "http://www.securityfocus.com/bid/92717", "https://codereview.chromium.org/2208483002/", "https://crbug.com/573131", "https://googlechromereleases.blogspot.com/2016/08/stable-channel-update-for-desktop_31.html"], "ranking": [[{"circl": 2}]], "cwe": "CWE-94", "cvss": "6.8", "capec": [{"related_weakness": ["94", "96", "95", "97", "272", "59", "282", "275", "264", "270", "714"], "solutions": ["Design: Enforce principle of least privilege", "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.", "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.", "Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.", "Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute."], "id": "35", "prerequisites": ["The attacker must have the ability to modify non-executable files consumed by the target software."], "summary": ["An attack of this type exploits a system's trust in configuration and resource files, when the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.", "The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser. Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/)", "http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here", "The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client's browser process.", "The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name \"public\" grants all users with the public role the ability to use the administration functionality.", "The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control."], "name": "Leverage Executable Code in Non-Executable Files"}, {"related_weakness": ["473", "15", "285", "302", "94", "96"], "solutions": ["If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.", "A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.", "Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.", "Use encapsulation when declaring your variables. This is to lower the exposure of your variables.", "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should be rejected by the program."], "id": "77", "prerequisites": ["A variable consumed by the application server is exposed to the client.", "A variable consumed by the application server can be overwritten by the user.", "The application server trusts user supplied data to compute business logic.", "The application server does not perform proper input validation."], "summary": ["This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An attacker can override environment variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the attacker can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables."], "name": "Manipulating User-Controlled Variables"}], "id": "CVE-2016-5149", "Published": "2016-09-11T06:59:04.037-04:00", "vulnerable_configuration": [{"title": "Google Chrome 52.0.2743.116", "id": "cpe:2.3:a:google:chrome:52.0.2743.116"}, {"title": "Novell Leap 42.1", "id": "cpe:2.3:o:novell:leap:42.1"}]}