import operator
import os

import plotly.graph_objs as go
from cpe import CPE
from lxml import etree
from plotly.offline import init_notebook_mode, iplot

from CVEScoreStat import Stats

init_notebook_mode()
# tree = ET.iterparse(open('test.xml'))

NSMAP = {
    None: 'http://scap.nist.gov/schema/feed/vulnerability/2.0',
    'vuln': 'http://scap.nist.gov/schema/vulnerability/0.4',
}

# These vendors were chosen because they had the most cves reported in 2015
intrest = ['apple', 'cisco', 'oracle', 'microsoft', 'adobe']

def prefixed(ns_prefix, rest):
    return '{%s}%s' % (NSMAP[ns_prefix], rest)


def getscore(cvss):
    return float(cvss[0].text)

def getinfo(filename):
    if os.path.exists(filename+'.bin'):
        print(filename, "exists -- taking in")
        with open(filename+'.bin', 'rb') as reader:
            return eval(reader.read())
    print(filename, "does not exist, parsing")
    f = open(filename)
    tree = etree.parse(f)
    f.close()
    vulns = []
    entry_nodes = tree.xpath('//prefix:entry', namespaces={'prefix':'http://scap.nist.gov/schema/feed/vulnerability/2.0'})
    for entry in entry_nodes:
        thisVuln = {}
        thisVuln['id'] = entry.find(prefixed('vuln', 'cve-id')).text
        vulnSoftware = entry.find(prefixed('vuln', 'vulnerable-software-list'))

        if vulnSoftware is not None:
                    for v in vulnSoftware:
                        try:
                            myCPE = CPE(v.text)
                        except NotImplementedError:
                            print("Could not parse")
                            #logging.warning("Unable to parse CPE '%s'" % v.text)
                        else:
                            thisVuln['part'] = myCPE.get_part()[0]
                            thisVuln['vendor'] = myCPE.get_vendor()[0]
                            if 'linux' in thisVuln['vendor']:
                                thisVuln['vendor'] = 'linux'
                            thisVuln['product'] = myCPE.get_product()[0]
                            if 'linux' in thisVuln['product']:
                                thisVuln['vendor'] = 'linux'
                            thisVuln['version'] = myCPE.get_version()[0]
                            thisVuln['update'] = myCPE.get_update()[0]
                            thisVuln['edition'] = myCPE.get_edition()[0]
                            thisVuln['language'] = myCPE.get_language()[0]

        cvss = entry.find(prefixed('vuln','cvss'))

        if cvss is not None:
            thisVuln['score'] = cvss.getchildren()[0].getchildren()[0].text
            thisVuln['accessVector'] = cvss.getchildren()[0].getchildren()[1].text
            thisVuln['accessComplexity'] = cvss.getchildren()[0].getchildren()[2].text
            thisVuln['auth'] = cvss.getchildren()[0].getchildren()[3].text
            thisVuln['impactConf'] = cvss.getchildren()[0].getchildren()[4].text
            thisVuln['impactInt'] = cvss.getchildren()[0].getchildren()[5].text
            thisVuln['impactAvail'] = cvss.getchildren()[0].getchildren()[6].text

    
        vulns.append(thisVuln)

    with open(filename+'.bin', 'wrb+') as myFile:
        myFile.write(bytes(vulns))     


#     with open(filename+'.bin', 'rb') as myFile:
#         data = eval(myFile.read())
#         print data == vulns

        
def makepie(data):
    vendorAverage = {}
    skipping = 0
    for cve in data:
        try:
            vendor  = cve['vendor']
            score = cve['score']
            if vendor in vendorAverage:
                vendorAverage[vendor].addscore(score)
            else:
                vendorAverage[vendor] = Stats(vendor)
                vendorAverage[vendor].addscore(score)
        except KeyError as e:
            skipping += 1
            
#     print "returning", skipping
#     return vendorAverage
    for vendor in vendorAverage:
        if vendor in intrest:
            tmp = vendorAverage[vendor]
            if tmp is not None:
                pie = tmp.getpiegraphchunks()
                fig = {
                'data': [{'labels': pie[0],
                'marker': {'colors': ['#87FC70',
                          '#FFDB4C',
                          '#FF5E3A']},
                'values': pie[1],          
                'textposition':'outside',
                'textinfo':'value+percent',
                'type': 'pie'}],
                'layout': {'title': 'Data for: '+vendor.title()+' 2015 CVE', 'width':500, 'height':500}
                }
                iplot(fig)
        

def gettopfive(data):
    vendors = {}
    for i in data:
        try:
            try:
                vendors[i['vendor']] += 1
            except Exception as e:
                vendors[i['vendor']] = 1
        except Exception as e:
            pass
        
    sorted_x = sorted(vendors.items(), key=operator.itemgetter(1), reverse=True)
    
    
    
    return sorted_x[0:5]
        
def gettopfivescores(data):
    vendorAverage = {}
    for cve in data:
        try:
            vendor  = cve['vendor']
            score = cve['score']
            if vendor in vendorAverage:
                vendorAverage[vendor].addscore(score)
            else:
                vendorAverage[vendor] = Stats(vendor)
                vendorAverage[vendor].addscore(score)
        except KeyError as e:
            pass
#     sort =  sorted(vendorAverage.values(), key=lambda x: x.getaverage(), reverse=True)
#     for i in range(5):
#         print sort[i].getcompany(), sort[i].getaverage() 

    topfive = gettopfive(data)
#     for i in topfive:
#         print "-", i

    vendorScores = {}
    for i in topfive:
        vendorScores[i[0]] = vendorAverage[i[0]].getaverage()

    print(vendorScores)
    vendorScores = sorted(vendorScores.items(), key=operator.itemgetter(1), reverse=True)
    print(vendorScores)
    for k in vendorScores:
        print("-", k)


def trendOverYears():
    FILENAME = "data/nvdcve-2.0-"
    FILEEXT = "xml"
    vendorsYear = {}
    
    for year in range(2002, 2016):
        cvefile =  FILENAME+str(year)+"."+FILEEXT
        data = getinfo(cvefile)
        for cve in data:
            try:
                vendor  = cve['vendor']
                score = cve['score']
                if vendor not in intrest:
                    continue
                if vendor not in vendorsYear.keys():
                    vendorsYear[vendor] = {}
                if year not in vendorsYear[vendor]:
                    vendorsYear[vendor][year] = Stats(vendor)
                vendorsYear[vendor][year].addscore(score)                
            except KeyError as e:
#                 print cve, "does not have a vendor associated with it"
                pass
                
                
        
                
    dataToGraph = []
    yDataSet = {}
    xDataSet = range(2002, 2016)
    for k,v in vendorsYear.items():
        print(k, ":")
        yDataSet[k] = []
        for m,n in v.items():
#             print m,n.getaverage()
            yDataSet[k].append(n.getaverage())

    print(yDataSet)

    for company in yDataSet:
        trace = go.Scatter(x = xDataSet, y=yDataSet[company], mode = 'line', name = company)
        dataToGraph.append(trace)
    
    iplot(dataToGraph)
            
#     trace0 = go.Scatter(
#     x = random_x,
#     y = random_y0,
#     mode = 'lines',
#     name = 'lines'
#     )
#     data = [trace0]
#     iplot(data)
    
if __name__ == '__main__':
#     data = []
#     if os.path.exists('test.bin'):
#         with open('test.bin', 'rb') as reader:
#             data = eval(reader.read())
#     else:
    data = getinfo('data/nvdcve-2.0-2015.xml')
    trendOverYears()
    makepie(data)
    gettopfive(data)
    gettopfivescores(data)


